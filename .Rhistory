result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20)
result_bagging_2 <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5)
result_rf[[2]]
result_rf[2]
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20)
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5)
result_rf[2]
result_rf[3]
result_rf[4]
result_rf_2[4]
rm(result_rf)
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20)
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20)
result_bagging_2 <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5)
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha3 = 0)
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 0, alpha2 = 0, alpha3 = 0)
result_rf_2[4]
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf_2[4]
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1, proba = 0.25)
result_rf_2[4]
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf_2[2]
result_rf_2[3]
result_rf_2[4]
result_rf[4]
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging_2 <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf[4]
ggsave('./charts/visual_pred_modelo2.png')
result_rf_2[4]
ggsave('./charts/visual_pred_bic.png')
result_bagging[4]
ggsave('./charts/visual_pred_gbm_modelo2.png')
result_bagging_2[4]
ggsave('./charts/visual_pred_gbm_bic.png')
result_rf[5]
result_rf_2[5]
# ------------- Seleccion de variables ---------------
# Objetivo: realizar una seleccion previa de variables empleando
# -> metodos step aic + bic
# -> rfe
# -> Por ultimo, elegir las variables candidatas por medio de glm
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(ggplot2)       # Libreria grafica
source("./librerias/librerias_propias.R")
source("./librerias/funcion steprepetido binaria.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
barras <- ggplot(surgical_dataset, aes(x = ccsMort30Rate, fill = factor(complication))) +
geom_boxplot() +
theme_minimal() + ggtitle("ccsMort30Rate boxplot by target") + theme(legend.position = "bottom")
barras
barras <- ggplot(surgical_dataset, aes(x = ccsMort30Rate, fill = factor(target))) +
geom_boxplot() +
theme_minimal() + ggtitle("ccsMort30Rate boxplot by target") + theme(legend.position = "bottom")
barras
ggsave('./charts/boxplot_distribution_by_ccsMort30Rate.png')
3690/14635
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
union_3_bis_2
union_3_bis_2$modelo <- stringi::stri_replace_all_fixed("- DECAY: 0.001", "")
union_3_bis_2$modelo <- stringi::stri_replace_all_fixed(union_3_bis_2$modelo, "- DECAY: 0.001", "")
union_3_bis_2$modelo <- stringi::stri_replace_all_fixed(union_3_bis_2$modelo, "- DECAY: 0.01", "")
union_3_bis_2
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
union_3_bis_2
union_3_bis_2$decay = c(rep("0.01", 20), rep("0.001", 20))
union_3_bis_2$modelo <- stringi::stri_replace_all_fixed(union_3_bis_2$modelo, "- DECAY: 0.001", "")
union_3_bis_2$modelo <- stringi::stri_replace_all_fixed(union_3_bis_2$modelo, "- DECAY: 0.01", "")
#-- Mostramos graficamente los resultados
#-  Modelo 1
ggplot(union_3_bis_2, aes(x = num_iter, y = tasa, col = decay)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
#-- Mostramos graficamente los resultados
#-  Modelo 1
ggplot(union_3_bis_2, aes(x = modelo, y = tasa, col = decay)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
#-- Mostramos graficamente los resultados
#-  Modelo 1
ggplot(union_3_bis_2, aes(x = modelo, y = tasa, col = decay)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(text = element_text(size=13, face = "bold"))
#-- Mostramos graficamente los resultados
#-  Modelo 1
p <- ggplot(union_3_bis_2, aes(x = modelo, y = tasa, col = decay)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Comparacion (tasa fallos)") + theme(text = element_text(size=13, face = "bold"))
q <- ggplot(union_3_bis_2, aes(x = modelo, y = auc, col = decay)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Comparacion (AUC)") + theme(text = element_text(size=13, face = "bold"))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/temp.png')
1000/5854
library(rpart.plot)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.001)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.01)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.005)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.002)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=10, cp=0.002)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.002)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1236)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.002)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1236878)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.002)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.001)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
tree$variable.importance
surgical_dataset <- fread("./data/surgical_dataset_final_completo.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.01)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
surgical_dataset <- fread("./data/surgical_completo.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
library(data.table)
surgical_dataset <- fread("./data/surgical_dataset_final_completo.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=1, cp=0.01)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.005)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
surgical_dataset <- fread("./data/surgical_dataset.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.001)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
ggsave('./charts/rpart.png')
library(ggplot2)
ggsave('./charts/rpart.png')
set.seed(1234)
tree <- rpart(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
method = "class", parms = list(split="gini"), xval=5, cp=0.001)
rpart.plot(tree, box.palette = "RdBu", shadow.col = "gray", nn=TRUE)
set.seed(1234)
glm(formu1,data=train,family = binomial(link="logit"))
tree <- glm(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
family = binomial(link="logit"))
set.seed(1234)
glm_model <- glm(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
family = binomial(link="logit"))
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
set.seed(1234)
glm_model <- glm(factor(target)~month.8+bmi+Age+mortality_rsi, data=surgical_dataset,
family = binomial(link="logit"))
glm_model
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "python_vs_r"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = tasa, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
library(readxl)
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "python_vs_r"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = tasa, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
library(ggplot2)
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = tasa, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = tasa, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
ggsave('./charts/comparativas/python_vs_r.png')
library(readxl)
library(ggplot2)
# Yes        773 1414         vs 773 1414
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "python_vs_r"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = tasa, col = tipo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = tipo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
img <- png::readPNG('./data/pic.png')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
background_image(img)+
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
img <- png::readPNG('./data/pic.png')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
ggpubr::background_image(img)+
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
img <- png::readPNG('./data/pic.png')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
ggpubr::background_image(img)+
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
img <- png::readPNG('./data/pic.png')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
ggpubr::background_image(img)+
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
img <- png::readPNG('./data/pic.png')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
ggpubr::background_image(img)+
geom_boxplot() +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
p <- ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
geom_boxplot() +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo (R-caret vs Python-sklearn)") +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.5))
p
ggsave('./charts/comparativas/python_vs_r.png')
glm_modelo <- glm(target~mortality_rsi+bmi+month.8+Age,data=surgical_dataset,family = binomial(link="logit"))
glm_modelo
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
p <- ggplot(dataframe_puntos_corte_rf_multiple_seeds, aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
p
q <- ggplot(dataframe_puntos_corte_rf_multiple_seeds[dataframe_puntos_corte_rf_multiple_seeds$pto_corte > 0.1 & dataframe_puntos_corte_rf_multiple_seeds$pto_corte< 0.5, ], aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Ampliado)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
q
r <- ggplot(dataframe_puntos_corte_gbm_multiple_seeds[dataframe_puntos_corte_gbm_multiple_seeds$pto_corte > 0.1 & dataframe_puntos_corte_gbm_multiple_seeds$pto_corte< 0.5, ], aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm - Ampliado)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
ggpubr::ggarrange(q, r, common.legend = TRUE)
q <- ggplot(dataframe_puntos_corte_rf_multiple_seeds[dataframe_puntos_corte_rf_multiple_seeds$pto_corte > 0.1 & dataframe_puntos_corte_rf_multiple_seeds$pto_corte< 0.5, ], aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (RF - Ampliado)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
ggpubr::ggarrange(q, r, common.legend = TRUE)
ggsave('./charts/variacion_pto_corte.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/XGBoost.RData")
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales
modelos_actuales$tipo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,auc, mean))
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
ggpubr::ggarrange(p, q, common.legend = TRUE)
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = tipo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = tipo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
ggpubr::ggarrange(p, q, common.legend = TRUE)
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$tipo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ]$modelo <- with(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
p
modelos_actuales
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), "modelo"] <- with(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ],
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
p
modelos_actuales
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
p
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = tipo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
q
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$tipo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
q
modelos_actuales
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=14, face = "bold"))
q
ggpubr::ggarrange(p, q)
ggsave('./charts/comparacion_final.png')
