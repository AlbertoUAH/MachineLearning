t$auc<-auc
medias1<-rbind(medias1,t)
}
}
medias1$tipo <- c(rep("Logistica", 10),
rep("Original",  70),
rep("Ensamblado", 180-10-70))
medias1$modelo <- with(medias1,
reorder(modelo,tasa, mean))
ggplot(medias1, aes(x = modelo, y = tasa, col = tipo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo (modelos originales + Ensamblado)") +
theme(axis.text.x = element_text(angle = 45), text = element_text(face = "bold", size = 13))
xgboost
ggsave('./charts/temp.png')
medias1$modelo <- with(medias1,
reorder(modelo,tasa, mean))
ggplot(medias1, aes(x = modelo, y = tasa, col = tipo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo (modelos originales + Ensamblado)") +
theme(axis.text.x = element_text(angle = 45), text = element_text(face = "bold", size = 15, vjust=0.7))
ggsave('./charts/temp.png')
medias1$modelo <- with(medias1,
reorder(modelo,auc, mean))
ggplot(medias1, aes(x = modelo, y = auc, col = tipo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo (modelos originales + Ensamblado)") +
theme(axis.text.x = element_text(angle = 45), text = element_text(face = "bold", size = 15, vjust=0.7))
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/XGBoost.RData")
tuneo_xgboost_modelo2_10rep
View(modelos_actuales)
View(modelos_actuales)
tuneo_xgboost_modelo2_10rep
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$tipo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
modelos_actuales$modelo
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$tipo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
modelos_actuales
modelos_actuales$Modelo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = Modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
modelos_actuales$modelo <- with(modelos_actuales,
reorder(Modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = Modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
modelos_actuales$Modelo <- with(modelos_actuales,
reorder(Modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = Modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
p
ggsave('./charts/temp.png')
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("LOGISTICA", "XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
q
ggpubr::ggarrange(p,q)
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Modelos_Dataset_Completo.RData")
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 15))
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45))
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45, vjust=0.5))
ggsave('./charts/temp.png')
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
ggsave('./charts/temp.png')
modelos
modelos$modelo
modelos$modelo <- stringi::stri_trans_toupper(modelos$modelo)
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Modelos_Dataset_Completo.RData")
modelos$tipo <- stringi::stri_trans_toupper(modelos$tipo)
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
ggsave('./charts/temp.png')
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") + theme(legend.position = "top") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
modelos$tipo <- with(modelos,
reorder(tipo, tasa, mean))
ggplot(modelos, aes(x = tipo, y = tasa, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion tasa de fallos dataset (subconjunto) y dataset original") + theme(legend.position = "top") +
theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
ggsave('./charts/temp.png')
modelos$tipo <- with(modelos,
reorder(tipo, auc, mean))
ggplot(modelos, aes(x = tipo, y = auc, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion AUC dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5)))
modelos$tipo <- with(modelos,
reorder(tipo, auc, mean))
ggplot(modelos, aes(x = tipo, y = auc, colour = modelo)) +
geom_boxplot(notch = FALSE) +
ggtitle("Comparacion AUC dataset (subconjunto) y dataset original") +
theme_bw() + theme(text = element_text(face = "bold", size = 17), axis.text.x = element_text(angle=45, vjust=0.5))
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/CompOtrasSelecciones.RData")
ggplot(rf_modelo_aic_df, aes(x = factor(mtry), y = auc)) +
geom_boxplot(adjust = 1.1) +
ggtitle("AUC por modelo")
modelos$modelo <- with(modelos, reorder(modelo,tasa, mean))
ggplot(modelos[modelos$tipo %in% c("Gradient_Boosting", "Avnnet", "SVM_RBF"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45), legend.position = "none")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 10), legend.position = "none")
modelos$tipo
modelos$modelo
modelos$modelo <- stringi::stri_replace_all_fixed(modelos$modelo, "set_", "")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 10), legend.position = "none")
modelos$modelo <- stringi::stri_replace_all_fixed(modelos$modelo, "2_empleado", "SET_EMPLEADO")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 10), legend.position = "none")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos$modelo
modelos$tipo
aux <- modelos[modelos$tipo %in% c("Bagging", "Random_Forest"), ]
ggplot(aux, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos$modelo <- stringi::stri_trans_toupper(modelos$modelo)
aux <- modelos[modelos$tipo %in% c("Bagging", "Random_Forest"), ]
ggplot(aux, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 10, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
g
aux <- modelos[modelos$tipo %in% c("Bagging", "Random_Forest"), ]
ggplot(aux, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
ggsave('./charts/temp.png')
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
ggsave('./charts/temp.png')
colours <- ifelse(modelo == "SET_EMPLEADO", "red", "black")
modelo <- levels(as.factor(modelos$modelo))
colours <- ifelse(modelo == "SET_EMPLEADO", "red", "black")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(color = colours, angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
modelo
modelo <- unique(modelos$modelo)
colours <- ifelse(modelo == "SET_EMPLEADO", "red", "black")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(color = colours, angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
ggplot(modelos, aes(tidytext::reorder_within(modelo, tasa, tipo, fun=mean) , y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("Tasa de fallos por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(color = ifelse(modelo == "SET_EMPLEADO", "red", "black"), angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
ggplot(modelos, aes(tidytext::reorder_within(modelo, auc, tipo, fun=mean) , y = auc, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_wrap( . ~ tipo, scales = "free_x") +
ggtitle("AUC por modelo y set de variables") + tidytext::scale_x_reordered() + labs(x = "Set de variables") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 13, vjust = 0.5), text = element_text( face = "bold", size = 13), legend.position = "none")
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
var_modelo2
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
var_modelo2
library(visualpred)
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf[4]
ggsave('./charts/temp.png')
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_rf_2 <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf_2[4]
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Aumentando_Grupos_Repeticiones.RData")
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13))
p
modelos$modelo <- stringi::stri_trans_toupper(modelos$modelo)
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13))
p
modelos$modelo <- with(modelos,
reorder(modelo, auc, mean))
q <- ggplot(modelos, aes(x = modelo, y = auc, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("AUC CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13))
ggpubr::ggarrange(p, q, common.legend = TRUE)
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
modelos$modelo <- with(modelos,
reorder(modelo, auc, mean))
q <- ggplot(modelos, aes(x = modelo, y = auc, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("AUC CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
modelos$modelo <- stringi::stri_replace_all_fixed(modelos$modelo, "GRADIENT_BOOSTING", "GBM")
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
modelos$modelo <- with(modelos,
reorder(modelo, auc, mean))
q <- ggplot(modelos, aes(x = modelo, y = auc, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("AUC CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45, vjust = 0.7))
modelos$modelo <- with(modelos,
reorder(modelo, auc, mean))
q <- ggplot(modelos, aes(x = modelo, y = auc, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("AUC CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45, vjust=0.7))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/comparacion_5_10_folds.png')
modelos$modelo <- with(modelos,
reorder(modelo, tasa, mean))
p <- ggplot(modelos, aes(x = modelo, y = tasa, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("Tasa de fallos CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45, vjust = 0.7))
modelos$modelo <- with(modelos,
reorder(modelo, auc, mean))
q <- ggplot(modelos, aes(x = modelo, y = auc, colour = cv)) +
geom_boxplot(notch = FALSE) +
ggtitle("AUC CV 5 folds vs CV 10 folds") +
theme_bw() + theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45, vjust=0.7))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/comparacion_5_10_folds.png')
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "xgboost"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$Modelo <- c(rep("LOGISTICA", 10), rep("RED NEURONAL", 10), rep("BAGGING", 10), rep("RANDOM FOREST", 10),
rep("GBM", 10), rep("SVM", 30), rep("XGBOOST", 10))
modelos_actuales$Modelo <- with(modelos_actuales,
reorder(Modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = Modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$modelo %in% c("XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
ggpubr::ggarrange(p,q)
modelos_actuales
modelos_actuales$Modelo <- with(modelos_actuales,
reorder(Modelo,tasa, mean))
p <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = Modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
modelos_actuales$Modelo <- with(modelos_actuales, reorder(Modelo,auc, mean))
q <- ggplot(modelos_actuales[modelos_actuales$Modelo %in% c("XGBOOST", "GBM", "RANDOM FOREST", "BAGGING"), ], aes(x = modelo, y = auc)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5), text = element_text(size=15, face = "bold"))
ggpubr::ggarrange(p,q)
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
p <- ggplot(dataframe_puntos_corte_rf_1, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest) - Modelo 1") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
q <- ggplot(dataframe_puntos_corte_bagging_1, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Bagging) - Modelo 1") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
ggpubr::ggarrange(p, q, common.legend = TRUE)
p <- ggplot(dataframe_puntos_corte_rf_1, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest) - Modelo 1") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11), axis.text.x = element_text(angle = 45))
q <- ggplot(dataframe_puntos_corte_bagging_1, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Bagging) - Modelo 1") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11), axis.text.x = element_text(angle = 45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
p <- ggplot(dataframe_puntos_corte_rf, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
q <- ggplot(dataframe_puntos_corte_gbm, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 11))
ggpubr::ggarrange(p, q, common.legend = TRUE)
dataframe_puntos_corte_rf_1
p <- ggplot(dataframe_puntos_corte_rf, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 12), axis.text.x = element_text(angle=45))
q <- ggplot(dataframe_puntos_corte_gbm, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 12), axis.text.x = element_text(angle=45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/temp.png')
p <- ggplot(dataframe_puntos_corte_rf, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45))
q <- ggplot(dataframe_puntos_corte_gbm, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 15), axis.text.x = element_text(angle=45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/temp.png')
p <- ggplot(dataframe_puntos_corte_rf, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (Random Forest)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
q <- ggplot(dataframe_puntos_corte_gbm, aes(x = factor(pto_corte))) +
geom_point(aes(y = sensitividad, color = "Sentividad")) +
geom_point(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 13), axis.text.x = element_text(angle=45))
ggpubr::ggarrange(p, q, common.legend = TRUE)
ggsave('./charts/temp.png')
var_modelo2
q <- ggplot(dataframe_puntos_corte_rf_multiple_seeds[dataframe_puntos_corte_rf_multiple_seeds$pto_corte > 0.1 & dataframe_puntos_corte_rf_multiple_seeds$pto_corte< 0.5, ], aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (RF - Ampliado)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 15))
r <- ggplot(dataframe_puntos_corte_gbm_multiple_seeds[dataframe_puntos_corte_gbm_multiple_seeds$pto_corte > 0.1 & dataframe_puntos_corte_gbm_multiple_seeds$pto_corte< 0.5, ], aes(x = factor(pto_corte))) +
geom_boxplot(aes(y = sensitividad, color = "Sentividad")) +
geom_boxplot(aes(y = especificidad, color = "Especificidad")) +
ggtitle("Especificidad vs Sensitividad (gbm - Ampliado)") +
labs(x ="Punto de corte", y = "Valor") +
scale_color_manual(values = colors) +  theme(text = element_text(face = "bold", size = 15))
ggpubr::ggarrange(q,r,common.legend = TRUE)
ggsave('./charts/temp.png')
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "python_vs_r"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- with(modelos_actuales, reorder(modelo, auc, mean))
ggplot(modelos_actuales, aes(x = modelo, y = auc, col = lenguaje)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo + ensamblados") +
theme(axis.text.x = element_text(face = "bold", vjust=0.8), text = element_text(face = "bold", size=15))
ggsave('./charts/temp.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
salida.rfe.lr
plot(salida.rfe.lr)
plot(salida.rfe.lr$results)
ggplot(salida.rfe.lr$results)
salida.rfe.lr
rm(list = setdiff(ls(), c("salida.rfe.lr", "salida.rfe.rf")))
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables_DatasetCompleto.RData")
salida.rfe.lr
