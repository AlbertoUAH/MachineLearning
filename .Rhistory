union_bagging_modelo2_bis <- rbind(union_bagging_modelo2, union_bagging_modelo2_bis)
union_bagging_modelo2_bis$rep <- c(rep("5", 45), c("10", 90))
View(union_bagging_modelo2_bis)
c(rep("5", 45), c("10", 90))
union_bagging_modelo2_bis$rep <- c(rep("5", 45), rep("10", 90))
union_bagging_modelo2_bis$modelo <- with(union_bagging_modelo2_bis,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_bis, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
union_bagging_modelo2_bis$modelo <- with(union_bagging_modelo2_bis,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_bis, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_10rep.png")
2000*100/5854
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
# Aplico caret y construyo modelos finales
control <- trainControl(method = "repeatedcv",number=5,repeats=10,
savePredictions = "all",classProbs=TRUE)
rfgrid.1 <-expand.grid(mtry=mtry.1)
set.seed(1234)
bagging_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 20, sampsize = 1000, ntree = n.trees.1, replace = TRUE)
matriz_conf_1 <- matriz_confusion_predicciones(bagging_1, NULL, surgical_test_data, 0.5)
rfgrid.2 <-expand.grid(mtry=mtry.2)
set.seed(1234)
bagging_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 30, sampsize = 2000, ntree = n.trees.2, replace = TRUE)
matriz_conf_2 <- matriz_confusion_predicciones(bagging_2, NULL, surgical_test_data, 0.5)
rm(rfgrid.1)
rm(rfgrid.2)
matriz_conf_1
matriz_conf_2
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
candidatos_final         <- list(candidato.bic.3, candidato.rfe.rf)
nombres_candidatos_final <- c("LOGISTICA BIC (TOP 5)", "RFE RF TOP 5")
union_final <- cruzada_logistica(surgical_dataset, target, candidatos_4, nombres_candidatos_4,
grupos = 5, repe = 10)
rm(candidatos_final)
rm(nombres_candidatos_final)
candidatos_final         <- list(candidato.bic.3, candidato.rfe.rf)
nombres_candidatos_final <- c("LOGISTICA BIC (TOP 5)", "RFE RF TOP 5")
union_final <- cruzada_logistica(surgical_dataset, target, candidatos_final, nombres_candidatos_final,
grupos = 5, repe = 10)
rm(candidatos_final)
rm(nombres_candidatos_final)
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
View(matriz_confusion_predicciones)
matriz_conf_1
stopCluster(cluster)
save.image(file = "./rdata/SeleccionVariables.RData")
union_final
union4
rbind(union4[union4$modelo %in% c("LOGISTICA BIC (TOP 5)", "RFE RF TOP 5"), ], union_final)
union4
c(rep("5", 10), rep("10", 20))
union_10_rep$rep <- c(rep("5", 10), rep("10", 20))
union_10_rep <- rbind(union4[union4$modelo %in% c("LOGISTICA BIC (TOP 5)", "RFE RF TOP 5"), ], union_final)
union_10_rep$rep <- c(rep("5", 10), rep("10", 20))
ggplot(union_10_rep, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_10_rep, aes(x = modelo, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_10_rep, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/01_boxplot_log_modelo1_error_10rep.jpeg')
ggplot(union_it_1, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggplot(union_10_rep, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/01_boxplot_log_modelo1_auc_10rep.jpeg')
save.image(file = "./rdata/SeleccionVariables.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
ggplot(modelos_actuales, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggplot(union_it_2, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_it_1, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_it_2, aes(x = num_iter, y = auc, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
union_it_2
rbind(union_it_2[, union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "200"])
rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "200", ])
rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", ])
union_it_1
rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", ],
union_it_1[union_it_1$modelo == "25 nodos" & union_it_1$num_iter == "200", ])
modelo1_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=25,
decay=0.01,repeticiones=5,itera=200)[[1]]
modelo2_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=20,
decay=0.01,repeticiones=5,itera=250)[[1]]
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(readxl)        # Lectura de ficheros Excel
source("./librerias/librerias_propias.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
modelo1_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=25,
decay=0.01,repeticiones=5,itera=200)[[1]]
modelo2_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=20,
decay=0.01,repeticiones=5,itera=250)[[1]]
rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", ],
union_it_1[union_it_1$modelo == "25 nodos" & union_it_1$num_iter == "200", ],
modelo1_final, modelo2_final)
modelo1_final
union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", ]
rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", c("tasa", "auc")],
union_it_1[union_it_1$modelo == "25 nodos" & union_it_1$num_iter == "200", c("tasa", "auc")],
modelo1_final, modelo2_final)
modelo1_final
union_final <- rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", c("tasa", "auc")],
union_it_1[union_it_1$modelo == "25 nodos" & union_it_1$num_iter == "200", c("tasa", "auc")],
modelo1_final, modelo2_final)
union_final$modelo <- c(rep("20+250", 5), rep("25+200", 5), rep("25+200", 10), rep("20+250", 10))
ggplot(union_final, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_final$rep    <- c(rep("5", 10), rep("10", 20))
ggplot(union_final, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", c("tasa", "auc")]
union_final
union_it_1
union_final
modelo1_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=25,
decay=0.01,repeticiones=5,itera=200)[[1]]
modelo2_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo2, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=20,
decay=0.01,repeticiones=5,itera=250)[[1]]
union_final <- rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", c("tasa", "auc")],
union_it_1[union_it_1$modelo == "25 nodos" & union_it_1$num_iter == "200", c("tasa", "auc")],
modelo1_final, modelo2_final)
union_final$modelo <- c(rep("20+250", 5), rep("25+200", 5), rep("25+200", 10), rep("20+250", 10))
union_final$rep    <- c(rep("5", 10), rep("10", 20))
ggplot(union_final, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_final, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggplot(union_it_1, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_2
ggplot(union_it_1, aes(x = num_iter, y = auc, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/avnnet/02_boxplot_nnet_modelo1_iteraciones_AUC.jpeg')
ggplot(union_it_1, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/avnnet/02_boxplot_nnet_modelo1_iteraciones_error.jpeg')
ggplot(union_it_2, aes(x = num_iter, y = tasa, col = modelo)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
modelo1_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=30,
decay=0.01,repeticiones=5,itera=200)[[1]]
modelo2_final <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo2, listclass=c(""),
grupos=5,sinicio=1234,repe=10, size=20,
decay=0.01,repeticiones=5,itera=250)[[1]]
union_final <- rbind(union_it_2[union_it_2$modelo == "20 nodos" & union_it_2$num_iter == "250", c("tasa", "auc")],
union_it_1[union_it_1$modelo == "30 nodos" & union_it_1$num_iter == "200", c("tasa", "auc")],
modelo1_final, modelo2_final)
union_final$modelo <- c(rep("20+250", 5), rep("30+200", 5), rep("30+200", 10), rep("20+250", 10))
union_final$rep    <- c(rep("5", 10), rep("10", 20))
ggplot(union_final, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/avnnet/02_boxplot_nnet_modelo2_iteraciones_error_10_rep.jpeg')
ggplot(union_final, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/avnnet/02_boxplot_nnet_modelo2_iteraciones_AUC_10_rep.jpeg')
rm(modelo1_final)
rm(modelo2_final)
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
# Aplico caret y construyo modelos finales
control <- trainControl(method = "repeatedcv",number=5,repeats=5,
savePredictions = "all",classProbs=TRUE)
avnnetgrid_1 <-  expand.grid(size=30,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=FALSE)
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
# Aplico caret y construyo modelos finales
control <- trainControl(method = "repeatedcv",number=5,repeats=10,
savePredictions = "all",classProbs=TRUE)
avnnetgrid_1 <-  expand.grid(size=30,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=FALSE)
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=250,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=FALSE)
matriz_conf_2 <- matriz_confusion_predicciones(avnnet_2, NULL, surgical_test_data, 0.5)
rm(avnnetgrid_1)
rm(avnnetgrid_2)
matriz_conf_1
matriz_conf_2
avnnet_1
avnnet_1$results
avnnet_1$pred
avnnet_1$results
View(cruzadaavnnetbin)
print(avnnet_1$results)
print(avnnet_1$resample)
avnnet_1
View(cruzadaavnnetbin)
control
union_it_1
union_final
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/comparativas/02_log_avnnet_tasa.jpeg')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
ggplot(modelos_actuales, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/comparativas/02_log_avnnet_auc.jpeg')
stopCluster(cluster)
save.image(file = "./rdata/RedesNeuronales.RData")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
mostrar_err_rate(rfbis.2$err.rate[, 1], rfbis.1$err.rate[, 1])
#-- ...Ampliamos entre 0 y 2000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:3000), 1], rfbis.1$err.rate[c(0:3000), 1])
#-- Ampliamos entre 0 y 1000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:1000), 1], rfbis.1$err.rate[c(0:1000), 1])
View(mostrar_err_rate)
mostrar_err_rate <- function(train.err.rate1, train.err.rate2) {
plot(train.err.rate1, col = 'red', type = 'p',
main = 'Error rate by nº trees', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
points(train.err.rate2, col = 'blue')
legend("topright", legend = c("OOB: MODELO 2","OOB: MODELO 1") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
}
mostrar_err_rate(rfbis.2$err.rate[, 1], rfbis.1$err.rate[, 1])
#-- ...Ampliamos entre 0 y 2000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:3000), 1], rfbis.1$err.rate[c(0:3000), 1])
#-- Ampliamos entre 0 y 1000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:1000), 1], rfbis.1$err.rate[c(0:1000), 1])
mostrar_err_rate <- function(train.err.rate1, train.err.rate2) {
plot(train.err.rate1, col = 'red', type = 'l',
main = 'Error rate by nº trees', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
lines(train.err.rate2, col = 'blue')
legend("topright", legend = c("OOB: MODELO 2","OOB: MODELO 1") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
}
mostrar_err_rate(rfbis.2$err.rate[, 1], rfbis.1$err.rate[, 1])
#-- ...Ampliamos entre 0 y 2000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:3000), 1], rfbis.1$err.rate[c(0:3000), 1])
#-- Ampliamos entre 0 y 1000 arboles
mostrar_err_rate(rfbis.2$err.rate[c(0:1000), 1], rfbis.1$err.rate[c(0:1000), 1])
3000/5854
nodesizes.1 <- list(20)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(randomForest)  # Seleccion del numero de arboles
library(readxl)        # Lectura de ficheros Excel
source("./librerias/librerias_propias.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
nodesizes.1 <- list(20)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
nodesizes.1 <- list(30)
sampsizes.1 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo1_3 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
nodesizes.1 <- list(30)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_3 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
nodesizes.1 <- list(40)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_4 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
nodesizes.1 <- list(50)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_5 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
nodesizes.1 <- list(10)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_6 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 5)
rm(bagging_modelo1_6)
union_bagging_modelo1 <- rbind(
bagging_modelo1_2[bagging_modelo1_2$modelo == "20+1000", ],
bagging_modelo1_2[bagging_modelo1_2$modelo == "20+1500", ],
bagging_modelo1_3[bagging_modelo1_3$modelo == "30+1500", ],
bagging_modelo1_3[bagging_modelo1_3$modelo == "30+2000", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+1500", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+2000", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+2500", ],
bagging_modelo1_5[bagging_modelo1_5$modelo == "50+3000", ]
)
union_bagging_modelo1$modelo <- with(union_bagging_modelo1,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo1, aes(x = modelo, y = tasa)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_bagging_modelo1$modelo <- with(union_bagging_modelo1,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo1, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/03_comparacion_final_tasa_modelo1_5rep.png")
ggplot(union_bagging_modelo1, aes(x = modelo, y = auc)) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo1_10rep.png")
ggsave("./charts/bagging/03_comparacion_final_auc_modelo1_5ep.png")
union_bagging_modelo1$modelo <- with(union_bagging_modelo1,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo1, aes(x = modelo, y = auc)) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/03_comparacion_final_auc_modelo1_5rep.png")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
nodesizes.1 <- list(20)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 10)
# Nodesize 30: 1500-2000 parece ser una buena opcion (en ambos casos la varianza AUC parece ser muy similar), aunque
# la varianza con respecto a la tasa de fallos es ligeramente menor con 2000 observaciones
nodesizes.1 <- list(30)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_3 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 10)
# Nodesize 40: en este caso, 1500-2000-2500 parecen ser alternativas al conjunto total de observaciones. Sin embargo,
# con 2000 y 2500 observaciones la varianza en relacion tanto al AUC como la tasa de fallos es menor en comparacion al modelo
# con solo 1000 observaciones
nodesizes.1 <- list(40)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_4 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 10)
# ¿Merece la pena aumentar el nodesize a 50? ¿O disminuirlo a 10?
nodesizes.1 <- list(50)
sampsizes.1 <- list(1, 1000, 1500, 2000, 2500, 3000)
bagging_modelo1_5 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 10)
# rm(bagging_modelo1_6)
# En relacion a sampsize 50, parece interesante 50 + 3000
#-- Posible candidato:   nodesize 20 y sampsize 1000-1500
#-- Posible candidato:   nodesize 30 y sampsize 1500-2000
#-- Posibles candidatos: nodesize 40 y sampsize 1500-2000-2500
#-- Posibles candidatos: nodesize 50 y sampsize 3000
#-- ¿Por qué modelo bagging nos decantamos?
union_bagging_modelo1_bis <- rbind(
bagging_modelo1_2[bagging_modelo1_2$modelo == "20+1000", ],
bagging_modelo1_2[bagging_modelo1_2$modelo == "20+1500", ],
bagging_modelo1_3[bagging_modelo1_3$modelo == "30+1500", ],
bagging_modelo1_3[bagging_modelo1_3$modelo == "30+2000", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+1500", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+2000", ],
bagging_modelo1_4[bagging_modelo1_4$modelo == "40+2500", ],
bagging_modelo1_5[bagging_modelo1_5$modelo == "50+3000", ]
)
rbind(union_bagging_modelo1, union_bagging_modelo1_bis)
union_bagging_modelo1 <- rbind(union_bagging_modelo1, union_bagging_modelo1_bis)
union_bagging_modelo1$rep <- c(rep("5", 40), rep("10", 80))
union_bagging_modelo1$modelo <- with(union_bagging_modelo1,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo1, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo1_10rep.png")
union_bagging_modelo1$modelo <- with(union_bagging_modelo1,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo1, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo1_10rep.png")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
