scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
return(union)
}
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5
)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=n.trees,shrinkage=shrinkage,
n.minobsinnode=n.minobsinnode,interaction.depth=interaction.depth)
cat("n.trees:", x$Var1, "; shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4,
"interaction.depth: ", x$Var5 , " -> FINISHED\n")
print(x)
salida$modelo <- paste0(x$Var1, "+",  x$Var2, "+", x$Var3, "+", x$Var4, "+", x$Var5)
lista.rf <- c(lista.rf, list(salida))
}
union <- do.call(rbind.data.frame, lista.rf)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
return(union)
}
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5
)
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=n.trees,shrinkage=shrinkage,
n.minobsinnode=n.minobsinnode,interaction.depth=interaction.depth)
cat("n.trees:", x$Var1, "; shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4,
"interaction.depth: ", x$Var5 , " -> FINISHED\n")
print(x)
salida$modelo <- paste0(x$Var1, "+",  x$Var2, "+", x$Var3, "+", x$Var4, "+", x$Var5)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
return(union)
}
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5
)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("n.trees:", x$Var1, "; shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4,
"interaction.depth: ", x$Var5 , " -> FINISHED\n")
salida$modelo <- paste0(x$Var1, "+",  x$Var2, "+", x$Var3, "+", x$Var4, "+", x$Var5)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
return(union)
}
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5
)
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0(x$Var2, "+", x$Var3, "+", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
return(union)
}
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5
)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0(x$Var2, "+", x$Var3, "+", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
ggsave(filename = path.1)
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
ggsave(filename = path.2)
return(union)
}
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1, path.2) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; n.minobsinnode: ", x$Var3, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0(x$Var2, "+", x$Var3, "+", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
ggsave(filename = path.1)
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
ggsave(filename = path.2)
return(union)
}
#-- Comparacion modelos candidatos
#   Modelo 1
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5, path.1 = "./charts/random_forest/modelo1/05_tasa_fallos_modelo1_5rep.png",
path.2 = "./charts/random_forest/modelo1/05_auc_modelo1_5rep.png"
)
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1, path.2) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrinkage: ", x$Var2, "+ minobsinnode: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
ggsave(filename = path.1)
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
ggsave(filename = path.2)
return(union)
}
#-- Comparacion modelos candidatos
#   Modelo 1
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5, path.1 = "./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_5rep.png",
path.2 = "./charts/random_forest/modelo1/05_auc_modelo1_5rep.png"
)
#-- Comparacion modelos candidatos
#   Modelo 1
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5, path.1 = "./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_5rep.png",
path.2 = "./charts/gradient_boosting/modelo1/05_auc_modelo1_5rep.png"
)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1, path.2) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrink: ", x$Var2, "+ bag.fract: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
ggsave(filename = path.1)
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
ggsave(filename = path.2)
return(union)
}
#-- Comparacion modelos candidatos
#   Modelo 1
tuneo_gradient_boosting_modelo1 <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 5, path.1 = "./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_5rep.png",
path.2 = "./charts/gradient_boosting/modelo1/05_auc_modelo1_5rep.png"
)
graph_2
graph
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1 = NULL, path.2 = NULL) {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrink: ", x$Var2, "+ bag.fract: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
if(is.null(path.1)) {
ggsave(filename = path.1)
}
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
if(is.null(path.2)) {
ggsave(filename = path.2)
}
return(union)
}
tuneo_gradient_boosting_modelo1_10rep <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 10)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1 = "", path.2 = "") {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrink: ", x$Var2, "+ bag.fract: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
if(path.1 == "") {
ggsave(filename = path.1)
}
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
if(path.2 == "") {
ggsave(filename = path.2)
}
return(union)
}
tuneo_gradient_boosting_modelo1_10rep <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 10)
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1 = "", path.2 = "") {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrink: ", x$Var2, "+ bag.fract: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
if(path.1 != "") {
ggsave(filename = path.1)
}
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
if(path.2 != "") {
ggsave(filename = path.2)
}
return(union)
}
# Funcion para el tuneo de un modelo bagging
tuneo_gradient_boosting <- function(dataset, target, lista.continua, n.trees, shrinkage, n.minobsinnode,
bag.fraction, interaction.depth, grupos, repe, path.1 = "", path.2 = "") {
lista.gb <- list()
for(x in apply(data.frame(expand.grid(n.trees, shrinkage, n.minobsinnode, bag.fraction, interaction.depth)),1,as.list)) {
salida <- cruzadagbmbin(data=dataset, vardep=target,
listconti=lista.continua,
listclass=c(""),
grupos=grupos,sinicio=1234,repe=repe,n.trees=x$Var1,shrinkage=x$Var2,
n.minobsinnode=x$Var3,bag.fraction=x$Var4,interaction.depth=x$Var5)
cat("shrinkage: ", x$Var2, "; bag.fraction: ", x$Var4, " -> FINISHED\n")
salida$modelo <- paste0("shrink: ", x$Var2, "+ bag.fract: ", x$Var4)
lista.gb <- c(lista.gb, list(salida))
}
union <- do.call(rbind.data.frame, lista.gb)
fill <- "#4271AE"
line <- "#1F3552"
print(colnames(union))
union$modelo <- with(union,reorder(modelo,tasa, mean))
print(ggplot(union, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo"))
if(path.1 != "") {
ggsave(filename = path.1)
}
union$modelo <- with(union,reorder(modelo,auc, mean))
print(ggplot(union, aes(x = modelo, y = auc)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo"))
if(path.2 != "") {
ggsave(filename = path.2)
}
return(union)
}
tuneo_gradient_boosting_modelo1_10rep <- tuneo_gradient_boosting(
dataset = surgical_dataset, lista.continua = var_modelo1, target = target,
n.trees = 100, n.minobsinnode = 20, bag.fraction = c(0.5, 0.8, 1), shrinkage = c(0.2, 0.3),
interaction.depth = 2, grupos = 5, repe = 10)
tunneo_modelo1 <- rbind(tuneo_gradient_boosting_modelo1, tuneo_gradient_boosting_modelo1_10rep)
rm(tunneo_modelo1)
tuneo_modelo1 <- rbind(tuneo_gradient_boosting_modelo1, tuneo_gradient_boosting_modelo1_10rep)
tuneo_gradient_boosting_modelo1
tuneo_gradient_boosting_modelo1_10rep
tuneo_modelo1$rep <- c(rep("5", 30), rep("10", 60))
tuneo_modelo1$modelo <- with(tuneo_modelo1, reorder(modelo,tasa, mean))
ggplot(tuneo_modelo1, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_10rep.png")
tuneo_modelo1$modelo <- with(tuneo_modelo1, reorder(modelo,auc, mean))
ggplot(tuneo_modelo1, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/gradient_boosting/modelo1/05_auc_modelo1_10rep.png")
5854*0.8
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/GradientBoosting.RData")
