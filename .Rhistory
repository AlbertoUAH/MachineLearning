dat.2$outlier[which(is.na(dat.2$is_outlier))] <- as.numeric(NA)
dat.3 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(TVF), TVF, as.numeric(NA)))
dat.3$outlier[which(is.na(dat.3$is_outlier))] <- as.numeric(NA)
ggarrange(dat.1 %>% ggplot(aes(x = cluster, y = Poblacion, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
dat.2 %>% ggplot(aes(x = cluster, y = NumEmpresas, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
dat.3 %>% ggplot(aes(x = cluster, y = TVF, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
provincias %>% ggplot(aes(x = cluster, y = VS, fill = cluster, label = rownames(provincias))) + geom_boxplot(),
ncol = 4, common.legend = TRUE)
rm(dat.1); rm(dat.2); rm(dat.3)
dat.1 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(Poblacion), Poblacion, as.numeric(NA)))
dat.1$outlier[which(is.na(dat.1$is_outlier))] <- as.numeric(NA)
dat.2 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(NumEmpresas), NumEmpresas, as.numeric(NA)))
dat.2$outlier[which(is.na(dat.2$is_outlier))] <- as.numeric(NA)
dat.3 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(TVF), TVF, as.numeric(NA)))
dat.3$outlier[which(is.na(dat.3$is_outlier))] <- as.numeric(NA)
ggarrange(dat.1 %>% ggplot(aes(x = cluster, y = Poblacion, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5, size = 10),
dat.2 %>% ggplot(aes(x = cluster, y = NumEmpresas, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
dat.3 %>% ggplot(aes(x = cluster, y = TVF, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
provincias %>% ggplot(aes(x = cluster, y = VS, fill = cluster, label = rownames(provincias))) + geom_boxplot(),
ncol = 4, common.legend = TRUE)
rm(dat.1); rm(dat.2); rm(dat.3)
dat.1 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(Poblacion), Poblacion, as.numeric(NA)))
dat.1$outlier[which(is.na(dat.1$is_outlier))] <- as.numeric(NA)
dat.2 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(NumEmpresas), NumEmpresas, as.numeric(NA)))
dat.2$outlier[which(is.na(dat.2$is_outlier))] <- as.numeric(NA)
dat.3 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(TVF), TVF, as.numeric(NA)))
dat.3$outlier[which(is.na(dat.3$is_outlier))] <- as.numeric(NA)
ggarrange(dat.1 %>% ggplot(aes(x = cluster, y = Poblacion, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5, size = 3),
dat.2 %>% ggplot(aes(x = cluster, y = NumEmpresas, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
dat.3 %>% ggplot(aes(x = cluster, y = TVF, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5),
provincias %>% ggplot(aes(x = cluster, y = VS, fill = cluster, label = rownames(provincias))) + geom_boxplot(),
ncol = 4, common.legend = TRUE)
rm(dat.1); rm(dat.2); rm(dat.3)
sil.
sil.k
sil <- silhouette(km.res$cluster, dist(provincias_ST))
rownames(sil) <- rownames(provincias)
sil
sil[sil[, 1] == 2,]
sil[sil[, 1] == 1,]
sil[sil[, 1] == 1,3] > 1
sil[sil[, 1] == 1,3] > 0.1
sil[sil[, 1] == 1,3] >= 0.1
dat.1 <- provincias %>% tibble::rownames_to_column(var="outlier") %>% group_by(cluster) %>% mutate(is_outlier=ifelse(is_outlier(CANE), CANE, as.numeric(NA)))
dat.1$outlier[which(is.na(dat.1$is_outlier))] <- as.numeric(NA)
dat.1 %>% ggplot(aes(x = cluster, y = CANE, fill = cluster, label = rownames(provincias))) + geom_boxplot() + geom_text(aes(label=outlier),na.rm=TRUE,position = position_dodge(width = 1), vjust = -0.5, size = 3)
rm(dat.1);
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", lwd = 2)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", font = 2)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", font.main = 2)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", font = 2)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", font.axis = 2)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", labelsize = 3, addEllipses = T, ellipse.type = "convex")
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", ggtheme = theme_minimal())
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", centroids = FALSE)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", show.clust.cent = FALSE)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", face = "bold")
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", mean.point = FALSE)
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", mean.point = FALSE, palette = "jco")
fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", mean.point = FALSE, palette = "npg")
fviz_cluster(list(data = provincias_ST, cluster = grupos.provincias),
ellipse.type = "convex", repel = TRUE, show.clust.cent = FALSE, ggtheme = theme_minimal())
grupos.provincias
plt <- fviz_pca_biplot(analisis.comp, habillage = provincias$cluster, repel = TRUE, col.var = "#2E9FDF", col.ind = "#696969", labelsize = 3, addEllipses = T, ellipse.type = "convex", mean.point = FALSE, palette = "npg")
ggplot(plt$data,aes(x=x,y=y,shape=cluster)) +
geom_point() + scale_x_reverse() + theme_bw() +
geom_text_repel(aes(label=name)) +
stat_ellipse(level=0.7)
ggplot(plt$data,aes(x=x,y=y,shape=cluster)) +
geom_point() + scale_x_reverse() + theme_bw() +
stat_ellipse(level=0.7)
ggplot(plt$data,aes(x=x,y=y)) +
geom_point() + scale_x_reverse() + theme_bw() +
stat_ellipse(level=0.7)
plt
plt + scale_y_reverse()
plt <- fviz_cluster(list(data = provincias_ST, cluster = grupos.provincias),
ellipse.type = "convex", repel = TRUE, show.clust.cent = FALSE, ggtheme = theme_minimal())
plt + scale_y_reverse()
plt
grupos.provincias
sil[sil[, 1] == 1,3] > 0.1
sil[sil[, 1] == 1] > 0.1
sil[sil[sil[, 1] == 1,3] > 0.1]
sil[sil[sil[, 1] == 1,3] > 0.1,]
sil[sil[, 1] == 1,3 > 0.1,]
sil[sil[, 1] == 1] > 0.1,]
sil[sil[, 1] == 1] > 0.1
sil[sil[sil[, 1] == 1] > 0.1]
wihch[sil[, 1] == 1] > 0.1
which[sil[, 1] == 1] > 0.1
which([sil[, 1] == 1] > 0.1)
which(sil[, 1] == 1] > 0.1)
which(sil[sil[, 1] == 1] > 0.1)
which(sil[sil[, 1] == 1, 3] > 0.1)
which(sil[sil[, 1] == 1, 3] < 0.1)
which(sil[sil[, 1] == 1, 3] < 0.11)
sil
which(sil[sil[, 1] == 1, 3] > 2)
which(sil[sil[, 1] == 1, 3] > 0.2)
which(sil[sil[, 1] == 1, 3] > 0.25)
which(sil[sil[, 1] == 2, 3] > 0.)
which(sil[sil[, 1] == 5, 3] > 0.)
which(sil[sil[, 1] == 2, 3] > 0.2)
which(sil[sil[, 1] == 2, 3] > 0.1)
which(sil[sil[, 1] == 1, 3] < 0.1)
which(sil[sil[, 1] == 1, 3] < 0.2)
sil
which(sil[sil[, 1] == 1, 3] < 0.11)
which(sil[sil[, 1] == 1, 3] < 0.2)
which(sil[sil[, 1] == 1, 3] > 0.2)
with(new,text3d(PC1,PC2,PC3,label))
knitr::kable(EsT_Clus_Comp2[c(2,5),], digits =2,caption = "Valores medios de la Componente 2")
summary(provincias)
provincias[provincias$cluster == 1, ]
sd(provincias[provincias$cluster == 1, ])
sd(provincias[provincias$cluster == 1, 1])
sd(provincias[provincias$cluster == 1, 2])
summary(provincias[provincias$cluster == 1, ])
sd(provincias[provincias$cluster == 1, ])
summary(provincias[provincias$cluster == 1, ])
summary(provincias)
x <- data.frame("c1" = c(1,2,3,4,NA,NA,NA,NA,NA))
library(scorecard)
x <- data.frame("c1" = c(1,2,3,4,NA,NA,NA,NA,NA), "y" = c(1,1,1,1,0,0,1,1,1))
var_filter(x, "y", iv_limit = 0, return_rm_reason = T)
x <- data.frame("c1" = c(1,2,NA,NA,NA,NA,NA,NA,NA), "y" = c(1,1,1,1,0,0,1,1,1))
var_filter(x, "y", iv_limit = 0, return_rm_reason = T)
data("germancredit")
dt<-germancredit
dt$y<-as.numeric(dt$creditability)
dt$y<-ifelse(dt$y==2,0,1)
dt<-dt[,-21]
dt$logamount<-log(dt$credit.amount)
dt<-dt[,-5]
# selección inicial
dt_s <- var_filter(dt,"y",iv_limit=0,return_rm_reason = TRUE)
# dividimos la serie original entre test y validación, para trabajar por separado
dt_list <- split_df(dt_s$dt, y="y", ratio = 0.7, seed = 21)
train <- dt_list$train
test <- dt_list$test
# Categorizamos
bins <- woebin(train, "y", print_step = 5)
woebin_plot(bins[[19]])
woebin_plot(bins[[12]])
## $telephone
df <- read.csv("/Users/alberto/Desktop/Finding-Exoplanet-Using-Machine-Learning-main/exoplanets_2018.csv")
View(df)
df$koi_disposition <- as.factor(df$koi_disposition)
summary(df)
9564-2367
fichero <- read.csv("~/UCM/Machine Learning Python/Practica ML/fichero.csv", row.names=1)
View(fichero)
library(scorecard)
woebin(fichero)
woebin(fichero, y = "labels")
woebin(fichero, y = "labels", positive = "True")
cut(fichero$dst_host_srv_count)
cut(fichero$dst_host_srv_count, breaks = 5)
woebin(fichero, y = "labels", positive = "True")
woebin(fichero, y = "labels", positive = "False")
library(readr)
data <- read_csv("UCM/Machine Learning Python/Practica ML/data.csv")
View(data)
library(scorecard)
woebin(data, y = "labels", positive = TRUE)
setwd("~/UCM/Machine Learning/Practica ML/MachineLearning")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/redes_neuronales.RData")
par(cex.axis=0.5)
boxplot(data=union.final,auc~modelo,main="AUC", lwd = 1, col = colores)
legend("bottomright", legend = c("FORMULA 1","FORMULA 2") ,
col = c(rgb(0.1,0.1,0.7,0.5) , rgb(0.8,0.1,0.3,0.6)) , bty = "n",
pch=20 , horiz = FALSE, inset = c(0.03, 0.1), cex = 0.75)
setwd("/Users/alberto/UCM/Machine Learning/Practica ML/MachineLearning/")
source("./librerias/cruzadas avnnet y log binaria.R")
library(parallel)
library(doParallel)
library(caret)
boxplot(data = rbind(plyr::ldply(lista.1, data.frame)[, -1], logistico.1), tasa~modelo,main="TASA FALLOS", col = "#F28773", lwd = 1)
boxplot(data = rbind(plyr::ldply(lista.1, data.frame)[, -1], logistico.1), auc~modelo,main="AUC", col = "#F28773", lwd = 1)
# Modelo 2
boxplot(data = rbind(plyr::ldply(lista.2, data.frame)[, -1], logistico.2), tasa~modelo,main="TASA FALLOS", col = "#F28773", lwd = 1)
boxplot(data = rbind(plyr::ldply(lista.2, data.frame)[, -1], logistico.2), auc~modelo,main="AUC", col = "#F28773", lwd = 1)
cvnnet.candidato.final.1 <- cruzadaavnnetbin(data=telco.data.final,vardep=vardep,listconti=variables.candidato.1, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=25,decay=0.1,repeticiones=5,itera=100)
cvnnet.candidato.final.1.df <- data.frame(cvnnet.candidato.final.1[1])
cvnnet.candidato.final.1.df$modelo="AVNNET 1. NODOS: 25 - DECAY: 0.1 - MAXIT: 200"
cvnnet.candidato.final.2 <- cruzadaavnnetbin(data=telco.data.final,vardep=vardep,listconti=variables.candidato.2, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=20,decay=0.01,repeticiones=5,itera=200)
cvnnet.candidato.final.2.df <- data.frame(cvnnet.candidato.final.2[1])
cvnnet.candidato.final.2.df$modelo="AVNNET 2. NODOS: 20 - DECAY: 0.01 - MAXIT: 200"
cvnnet.candidato.final.1 <- cruzadaavnnetbin(data=medic.data.final,vardep=vardep,listconti=variables.candidato.1, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=25,decay=0.1,repeticiones=5,itera=100)
cvnnet.candidato.final.1.df <- data.frame(cvnnet.candidato.final.1[1])
cvnnet.candidato.final.1.df$modelo="AVNNET 1. NODOS: 25 - DECAY: 0.1 - MAXIT: 200"
cvnnet.candidato.final.2 <- cruzadaavnnetbin(data=medic.data.final,vardep=vardep,listconti=variables.candidato.2, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=20,decay=0.01,repeticiones=5,itera=200)
cvnnet.candidato.final.2.df <- data.frame(cvnnet.candidato.final.2[1])
cvnnet.candidato.final.2.df$modelo="AVNNET 2. NODOS: 20 - DECAY: 0.01 - MAXIT: 200"
cvnnet.candidato.final.1 <- cruzadaavnnetbin(data=medic.data.final,vardep=vardep,listconti=conjunto.1, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=25,decay=0.1,repeticiones=5,itera=100)
cvnnet.candidato.final.1.df <- data.frame(cvnnet.candidato.final.1[1])
cvnnet.candidato.final.1.df$modelo="AVNNET 1"
cvnnet.candidato.final.2 <- cruzadaavnnetbin(data=medic.data.final,vardep=vardep,listconti=conjunto.2, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=20,decay=0.01,repeticiones=5,itera=200)
cvnnet.candidato.final.2.df <- data.frame(cvnnet.candidato.final.2[1])
cvnnet.candidato.final.2.df$modelo="AVNNET 2"
union.final <- rbind(logistico.1, logistico.2, cvnnet.candidato.final.1.df, cvnnet.candidato.final.2.df)
union.final$formula <- c(rep("1", 5), rep("2", 5), rep("1", 5), rep("2", 5))
union.final$formula <- as.factor(union.final$formula)
colores <- ifelse(levels(union.final$formula)=="1" , rgb(0.1,0.1,0.7,0.5) ,
rgb(0.8,0.1,0.3,0.6))
View(union.final)
par(cex.axis=0.5)
boxplot(data=union.final,tasa~modelo,main="TASA FALLOS", lwd = 1, col = colores)
legend("bottomright", legend = c("FORMULA 1","FORMULA 2") ,
col = c(rgb(0.1,0.1,0.7,0.5) , rgb(0.8,0.1,0.3,0.6)) , bty = "n",
pch=20 , horiz = FALSE, inset = c(0.03, 0.1), cex = 0.75)
par(cex.axis=0.5)
boxplot(data=union.final,auc~modelo,main="AUC", lwd = 1, col = colores)
legend("bottomright", legend = c("FORMULA 1","FORMULA 2") ,
col = c(rgb(0.1,0.1,0.7,0.5) , rgb(0.8,0.1,0.3,0.6)) , bty = "n",
pch=20 , horiz = FALSE, inset = c(0.03, 0.1), cex = 0.75)
for(modelo in c(cvnnet.candidato.final.1, cvnnet.candidato.final.2)) {
print(modelo$table)
}
stopCluster(cluster)
registerDoSEQ()
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/redes_neuronales.RData")
rm(list = setdiff(ls(), c("logistico.1", "logistico.2", "cvnnet.candidato.final.1",
"cvnnet.candidato.final.2", "medic.data.final",
"conjunto.1", "conjunto.2", "vardep")))
source ("./librerias/cruzada rf binaria.R")
library(randomForest)
library(parallel)
library(doParallel)
library(caret)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
mtry.1 <- 7
mtry.2 <- 5
conjunto.1
conjunto.2
set.seed(1234)
rfbis.1<-randomForest(factor(vardeo)~complication_rsi+ccsComplicationRate..0.0.1.+ccsComplicationRate..0.2.more.+month.8+Age+bmi+moonphase+mortality_rsi+ccsMort30Rate..0.001.0.002.,
data=medic.data.final,
mtry=mtry.1,ntree=5000,nodesize=10,replace=TRUE)
# Y el modelo 2
set.seed(1234)
rfbis.2<-randomForest(factor(vardep)~Age+complication_rsi+ccsComplicationRate..0.0.1.+mortality_rsi+bmi,
data=medic.data.final,
mtry=mtry.2,ntree=5000,nodesize=10,replace=TRUE)
set.seed(1234)
rfbis.1<-randomForest(factor(vardep)~complication_rsi+ccsComplicationRate..0.0.1.+ccsComplicationRate..0.2.more.+month.8+Age+bmi+moonphase+mortality_rsi+ccsMort30Rate..0.001.0.002.,
data=medic.data.final,
mtry=mtry.1,ntree=5000,nodesize=10,replace=TRUE)
# Y el modelo 2
set.seed(1234)
rfbis.2<-randomForest(factor(vardep)~Age+complication_rsi+ccsComplicationRate..0.0.1.+mortality_rsi+bmi,
data=medic.data.final,
mtry=mtry.2,ntree=5000,nodesize=10,replace=TRUE)
set.seed(1234)
rfbis.1<-randomForest(factor(vardep)~complication_rsi+ccsComplicationRate..0.0.1.+ccsComplicationRate..0.2.more.+month.8+Age+bmi+moonphase+mortality_rsi+ccsMort30Rate..0.001.0.002.,
data=medic.data.final,
mtry=mtry.1,ntree=5000,nodesize=10,replace=TRUE)
colnames(medic.data.final)
set.seed(1234)
rfbis.1<-randomForest(factor(target)~complication_rsi+ccsComplicationRate..0.0.1.+ccsComplicationRate..0.2.more.+month.8+Age+bmi+moonphase+mortality_rsi+ccsMort30Rate..0.001.0.002.,
data=medic.data.final,
mtry=mtry.1,ntree=5000,nodesize=10,replace=TRUE)
# Y el modelo 2
set.seed(1234)
rfbis.2<-randomForest(factor(target)~Age+complication_rsi+ccsComplicationRate..0.0.1.+mortality_rsi+bmi,
data=medic.data.final,
mtry=mtry.2,ntree=5000,nodesize=10,replace=TRUE)
plot(rfbis.2$err.rate[,1], type = 'l', col = 'red')
lines(rfbis.1$err.rate[,1], col = 'blue')
legend("topright", legend = c("5 variables","7 variables") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
plot(rfbis.2$err.rate[c(0:2000),1], type = 'l', col = 'red')
lines(rfbis.1$err.rate[c(0:2000),1], col = 'blue')
legend("topright", legend = c("5 variables","7 variables") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
plot(rfbis.2$err.rate[c(0:1000),1], type = 'l', col = 'red')
lines(rfbis.1$err.rate[c(0:1000),1], col = 'blue')
legend("topright", legend = c("5 variables","7 variables") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
View(rfbis.2)
rfbis.2
rfbis.2$err.rate
rfbis.2$err.rate[c(1:500),]
rfbis.2$err.rate[c(300:500),]
plot(rfbis.2$err.rate[,1], col = 'red')
points(rfbis.1$err.rate[,1], col = 'blue')
legend("topright", legend = c("5 variables","7 variables") ,
col = c('red', 'blue') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
rfbis.2$err.rate[,1]
rfbis.2$err.rate[c(0:2000),1]
rfbis.2$err.rate[c(0:2000),1]
n.tree <- 300
nodesizes.1 <- list(5, 10, 20, 30, 40, 50, 100, 150, 200)
# Sampsize maximo: (k-1) * n => 6835 / 5 = 1367 y se utilizan (4/5) * 6835 = 5468 obs.
# Conclusion: sampsize maximo: 5468 obs. (de forma aproximada)
sampsizes <- list(1, 500, 1000, 2000, 3000, 4000, 5000, 5400)
# Tunning modelos
n.tree <- 300
nodesizes.1 <- list(5, 10, 20, 30, 40, 50, 100, 150, 200)
# Sampsize maximo: (k-1) * n => 6835 / 5 = 1367 y se utilizan (4/5) * 6835 = 5468 obs.
# Conclusion: sampsize maximo: 5468 obs. (de forma aproximada)
sampsizes <- list(1, 500, 1000, 2000, 3000, 4000, 5000, 5400)
lista.rf.1 <- list()
sapply(nodesizes.1, function(param1) {
salida <- cruzadarfbin(data=medic.data.final, vardep=vardep,
listconti=conjunto.1,
listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=param1,
mtry=mtry.1,ntree=n.tree)
cat("NODESIZE-", param1, "-> FINISHED\n")
salida$modelo <- paste0("NODESIZE-", param1)
lista.rf.1 <- c(lista.rf.1, list(salida))
})
nodesizes.2 <- list(5, 10, 20, 30, 40, 50, 100, 150, 200)
lista.rf.2 <- list()
sapply(nodesizes.2, function(param2) {
salida <- cruzadarfbin(data=medic.data.final, vardep=vardep,
listconti=conjunto.2,
listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=param2,
mtry=mtry.2,ntree=n.tree)
cat("NODESIZE-", param2, "-> FINISHED\n")
salida$modelo <- paste0("NODESIZE-", param2)
lista.rf.2 <- c(lista.rf.2, list(salida))
})
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/bagging.RData")
expand.grid(nodesizes.1, sample())
expand.grid(nodesizes.1, sampsizes)
unlist(expand.grid(nodesizes.1, sample()))
c(expand.grid(nodesizes.1, sample()))
c(expand.grid(nodesizes.1, sampsizes))
unlist(expand.grid(nodesizes.1, sampsizes))
list(expand.grid(nodesizes.1, sampsizes))
expand.grid(nodesizes.1, sampsizes)
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row)
}
for(row in data.frame(expand.grid(nodesizes.1, sampsizes))) {
print(row)
}
tidyr::crossing(nodesizes.1, sampsizes)
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row)
}
tidyr::crossing(nodesizes.1, sampsizes)
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[1])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[0])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[2])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[2][1])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[[2]])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[[2]][2])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[[2]][1])
}
for(row in tidyr::crossing(nodesizes.1, sampsizes)) {
print(row[[2]])
}
tidyr::crossing(nodesizes.1, sampsizes)
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[2]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[2][1]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[2]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[2,1]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[1]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[[3]])
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row)
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
row[0]
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
row[1]
}
for(row in expand.grid(nodesizes.1, sampsizes)) {
print(row[1])
}
apply(expand.grid(nodesizes.1, sampsizes),1 , function(x) {
print(x)
})
apply(expand.grid(nodesizes.1, sampsizes),1 , function(x) {
print(x$Var1)
})
apply(expand.grid(nodesizes.1, sampsizes),1 , function(x) {
print(x$Var2)
})
for(x in expand.grid(nodesizes.1, sampsizes)) {
print(x$Var2)
}
for(x in expand.grid(nodesizes.1, sampsizes)) {
print(x$1)
}
for(x in expand.grid(nodesizes.1, sampsizes)) {
print(x[1])
}
for(x in expand.grid(nodesizes.1, sampsizes)) {
print(x[2])
}
for(x in as.matrix(expand.grid(nodesizes.1, sampsizes))) {
print(x)
}
for(x in rbind(expand.grid(nodesizes.1, sampsizes))) {
print(x)
}
for(x in unlist(expand.grid(nodesizes.1, sampsizes))) {
print(x)
}
for(x in unlist(data.frame(expand.grid(nodesizes.1, sampsizes)))) {
print(x)
}
data.frame(expand.grid(nodesizes.1, sampsizes)))
data.frame(expand.grid(nodesizes.1, sampsizes))
for(x in data.frame(expand.grid(nodesizes.1, sampsizes))) {
print(x$Var1)
}
unlist(data.frame(expand.grid(nodesizes.1, sampsizes)))
for(x in unlist(data.frame(expand.grid(nodesizes.1, sampsizes)))) {
print(x$Var1)
}
for(x in c(data.frame(expand.grid(nodesizes.1, sampsizes)))) {
print(x)
}
for(x in plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes))), 1, c) {
print(x)
}
for(x in plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)) {
print(x)
}
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c))
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), 1, c)
plyr::dlply(data.frame(expand.grid(nodesizes.1, sampsizes)), (.id), c)
apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)
unlist(apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list))
for(x in apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)) {
print(x)
}
for(x in apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)) {
print(x)
}
for(x in apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)) {
print(x$Var1)
}
for(x in apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)) {
print(x$Var1)
print(x$Var2)
}
lista.rf.1 <- list()
for(x in apply(data.frame(expand.grid(nodesizes.1, sampsizes)),1,as.list)) {
salida <- cruzadarfbin(data=medic.data.final, vardep=vardep,
listconti=conjunto.1,
listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=x$Var1,
mtry=mtry.1,ntree=n.tree, sampsize=x$Var2)
cat(x$Var1, "+",  x$Var2 , "-> FINISHED\n")
salida$modelo <- paste0(x$Var1, "+",  x$Var2)
lista.rf.1 <- c(lista.rf.1, list(salida))
}
nodesizes.2 <- list(5, 10, 20, 30, 40, 50, 100, 150, 200)
lista.rf.2 <- list()
for(x in apply(data.frame(expand.grid(nodesizes.2, sampsizes)),1,as.list)) {
salida <- cruzadarfbin(data=medic.data.final, vardep=vardep,
listconti=conjunto.2,
listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=x$Var1,
mtry=mtry.2,ntree=n.tree, sampsize=x$Var2)
cat(x$Var1, "+",  x$Var2 , "-> FINISHED\n")
salida$modelo <- paste0(x$Var1, "+",  x$Var2)
lista.rf.2 <- c(lista.rf.2, list(salida))
}
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/bagging.RData")
