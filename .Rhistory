ggtitle("AUC por modelo") +
theme(axis.text.x = element_text(angle = 45), legend.position = "none")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/CompOtrasSelecciones.RData")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("./capturas/Depuracion/woebin_mort30_dementia.png")
# ------------- Depuracion ---------------
# Objetivo: realizar un analisis exploratorio + depuracion inicial datos
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
surgical_dataset %>% group_by(complication)
surgical_dataset %>% group_by(baseline_dementia)
surgical_dataset %>% group_by(baseline_dementia, complication) %>% summarise(count = n(complication))
surgical_dataset %>%
count(complication, baseline_dementia) %>%
group_by(complication) %>%          # now required with changes to dplyr::count()
mutate(prop = prop.table(n))
surgical_dataset %>%
count(baseline_dementia, complication) %>%
group_by(complication) %>%          # now required with changes to dplyr::count()
mutate(prop = prop.table(n))
surgical_dataset %>%
count(mort30, complication) %>%
group_by(complication) %>%
mutate(prop = prop.table(n))
#-- baseline_dementia
surgical_dataset %>%
count(baseline_dementia, complication) %>%
group_by(complication) %>%
mutate(prop = prop.table(n))
#-- mort30
surgical_dataset %>%
count(mort30, complication) %>%
group_by(complication) %>%
mutate(prop = prop.table(n))
#-- baseline_dementia
surgical_dataset %>%
count(baseline_dementia, complication) %>%
group_by(complication) %>%
mutate(prop = prop.table(n))
#-- mort30
surgical_dataset %>%
count(mort30, complication) %>%
group_by(complication) %>%
mutate(prop = n)
surgical_dataset %>%
count(mort30, complication) %>%
group_by(complication)
class(surgical_dataset)
# ------------- Depuracion ---------------
# Objetivo: realizar un analisis exploratorio + depuracion inicial datos
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
# Problema - numerosas observaciones
# Por tiempo, se ha tomado la decision de elegir un subconjunto de datos
# Para ello, recurrimos a createDataPartition
set.seed(1234)
partitions <- createDataPartition(surgical_dataset$complication, p = 0.40, list = FALSE)
surgical_dataset_partitioned <- surgical_dataset
#-- Codificamos como variables categoricas: target + variables categoricas
surgical_dataset_partitioned$complication <- as.factor(surgical_dataset_partitioned$complication)
# Por numerico de valores unicos (y por la documentacion), codificamos las siguientes variables como categoricas
cat_columns <- c("gender", "race", "asa_status", "baseline_cancer", "baseline_cvd", "baseline_dementia",
"baseline_diabetes", "baseline_digestive", "baseline_osteoart", "baseline_psych",
"baseline_pulmonary", "dow", "month", "moonphase", "mort30")
surgical_dataset_partitioned[,cat_columns] <- lapply(surgical_dataset_partitioned[, cat_columns], factor)
# Problema: complication_rsi y ccsComplicationRate se calculan a partir de la variable objetivo
# surgical_dataset_partitioned$complication_rsi    <- NULL
# surgical_dataset_partitioned$ccsComplicationRate <- NULL
# Separamos las variables en numericas, categoricas y target
cat_columns <- names(Filter(is.factor, surgical_dataset_partitioned))[-16]
num_columns <- names(Filter(is.numeric, surgical_dataset_partitioned))
target      <- "complication"
salida.woe <- woebin(surgical_dataset_partitioned[, c(cat_columns, target)], y = target, positive = 1)
salida.woe
804/(1525+804)
salida.woe$dow
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) +
geom_text(aes(label = c(1,1,1,1,1)), position = position_stack(0.5), color = "white")
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_label(
label="Look at this!",
x=4.1,
y=20,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + annotate("rect", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21,
alpha = .2)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
themeb + annotate("rect", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21,
alpha = .2)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
themebw() + annotate("rect", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21,
alpha = .2)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_bw() + annotate("rect", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21,
alpha = .2)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_bw()
# ------------- Depuracion ---------------
# Objetivo: realizar un analisis exploratorio + depuracion inicial datos
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
# Problema - numerosas observaciones
# Por tiempo, se ha tomado la decision de elegir un subconjunto de datos
# Para ello, recurrimos a createDataPartition
set.seed(1234)
partitions <- createDataPartition(surgical_dataset$complication, p = 0.40, list = FALSE)
surgical_dataset_partitioned <- surgical_dataset
#-- Codificamos como variables categoricas: target + variables categoricas
surgical_dataset_partitioned$complication <- as.factor(surgical_dataset_partitioned$complication)
# Por numerico de valores unicos (y por la documentacion), codificamos las siguientes variables como categoricas
cat_columns <- c("gender", "race", "asa_status", "baseline_cancer", "baseline_cvd", "baseline_dementia",
"baseline_diabetes", "baseline_digestive", "baseline_osteoart", "baseline_psych",
"baseline_pulmonary", "dow", "month", "moonphase", "mort30")
surgical_dataset_partitioned[,cat_columns] <- lapply(surgical_dataset_partitioned[, cat_columns], factor)
# Problema: complication_rsi y ccsComplicationRate se calculan a partir de la variable objetivo
# surgical_dataset_partitioned$complication_rsi    <- NULL
# surgical_dataset_partitioned$ccsComplicationRate <- NULL
# Separamos las variables en numericas, categoricas y target
cat_columns <- names(Filter(is.factor, surgical_dataset_partitioned))[-16]
num_columns <- names(Filter(is.numeric, surgical_dataset_partitioned))
target      <- "complication"
v
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)
cat_columns <- c("gender", "race", "asa_status", "baseline_cancer", "baseline_cvd", "baseline_dementia",
"baseline_diabetes", "baseline_digestive", "baseline_osteoart", "baseline_psych",
"baseline_pulmonary", "dow", "month", "moonphase", "mort30", "complication")
surgical_dataset_partitioned[,cat_columns] <- lapply(surgical_dataset_partitioned[, cat_columns], factor)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)
table(surgical_dataset$complication)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
ggplot(surgical_dataset, aes(x = dow, fill = complication)) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=dow), vjust=0)
ggplot(surgical_dataset, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, .(x), y=length(x))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(x), y=length(x))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), y=length(dow))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), y=length(dow))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), summarise, y=length(dow))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl
sl <- plyr::ddply(surgical_dataset, plyr::.(dow, complication), summarise, y=length(dow))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow, complication), summarise, y=length(dow))
ggplot(sl, aes(x = dow, y=y, fill = factor(complication))) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), y=length(dow)/nrow(surgical_dataset))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), y=(length(dow)/nrow(surgical_dataset)))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow), summarise, y=(length(dow)/nrow(surgical_dataset)))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow, complication), summarise, y=(length(dow)/nrow(surgical_dataset)))
ggplot(sl, aes(x = dow, y=y, fill = complication)) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl <- plyr::ddply(surgical_dataset, plyr::.(dow, complication), summarise, y=round(length(dow)/nrow(surgical_dataset), 2))
ggplot(sl, aes(x = dow, y=y, fill = factor(complication))) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)  +
geom_text(aes(label=y), vjust=0)
sl
ggplot(surgical_dataset, aes(x = dow, y=y, fill = factor(complication))) +
geom_bar(stat = "identity") +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
)
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_label()
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_text(stat='count', aes(label=..count..), vjust=-1)
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_text(stat='count', aes(label=..count..), vjust=-1) +
geom_text(stat='count', aes(label=..count../..n..), vjust=-1)
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_text(stat='count', aes(label=..count..), position = position_stack(vjust = 0.5))
ggplot(surgical_dataset, aes(x = dow, fill = factor(complication))) +
geom_bar() +
labs(x = 'Day of week', y = 'Nº patients') +
ggtitle('Complication distribution by day of week') +
theme_minimal() +
theme(
text = element_text(family = 'Helvetica')
) + geom_text(stat='count', aes(label=..count..), position = position_stack(vjust = 0.5)) + # Show dots
geom_label(
label="Look at this!",
x=4.1,
y=20,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)
786+682+703
1810+1347+1813
knitr::kable(data.frame(dow = c("1","2","3", "En conjunto"), prop.complicacion = c(
round((786/(786+1810)), 2),
round((682/(682+1347)), 2),
round((703/(1813+703)), 2),
round((2171/(2171+4970)), 2)
)))
knitr::kable(data.frame(dow = c("1","2","3", "En conjunto"), prop.complicacion = c(
round((786/(786+1810)), 3) * 100,
round((682/(682+1347)), 3) * 100,
round((703/(1813+703)), 3) * 100,
round((2171/(2171+4970)), 3) * 100
)))
804/(1525+804)
786+1810
682+1347
1813+703
2171+4970
1525+804
knitr::kable(data.frame(dow = c("1","2","3", "En conjunto", "4"),
pacientes.sin.comp = c(4450, 1810, 1347, 1813, 1525),
pacientes.con.comp = c(715, 786, 682, 703, 804),
total = c(2596, 2029, 2516, 7141, 2329),
prop.complicacion = c(
round((786/(786+1810)), 3) * 100,
round((682/(682+1347)), 3) * 100,
round((703/(1813+703)), 3) * 100,
round((2171/(2171+4970)), 3) * 100,
round((804/(1525+804)), 3) * 100
)))
knitr::kable(data.frame(dow = c("1","2","3", "En conjunto (1-2-3)", "4"),
pacientes.sin.comp = c(4450, 1810, 1347, 1813, 1525),
pacientes.con.comp = c(715, 786, 682, 703, 804),
total = c(2596, 2029, 2516, 7141, 2329),
prop.complicacion = c(
round((786/(786+1810)), 3) * 100,
round((682/(682+1347)), 3) * 100,
round((703/(1813+703)), 3) * 100,
round((2171/(2171+4970)), 3) * 100,
round((804/(1525+804)), 3) * 100
)))
knitr::kable(data.frame(dow = c("1","2","3", "En conjunto (1-2-3)", "4"),
sin.comp = c(4450, 1810, 1347, 1813, 1525),
con.comp = c(715, 786, 682, 703, 804),
total = c(2596, 2029, 2516, 7141, 2329),
prop.complicacion = c(
round((786/(786+1810)), 3) * 100,
round((682/(682+1347)), 3) * 100,
round((703/(1813+703)), 3) * 100,
round((2171/(2171+4970)), 3) * 100,
round((804/(1525+804)), 3) * 100
)))
inspectdf::inspect_na(surgical_dataset)
inspectdf::show_plot(inspectdf::inspect_na(surgical_dataset))
