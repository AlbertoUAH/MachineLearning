s <- tabla %>% arrange(.,-MeanDecreaseAccuracy) %>%
ggplot(aes(MeanDecreaseAccuracy, vars)) +
geom_col() +
geom_label(aes(label=round(MeanDecreaseAccuracy,3), x=MeanDecreaseAccuracy), size=3, colour="blue", fontface = "bold") +
scale_x_continuous(expand=expansion(c(0,0.04))) +
ggtitle(title) +
theme_bw() +
theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.title=element_blank(),
text = element_text(size=14, face = "bold"))
return(s)
}
imp1 <- show_vars_importance(rf_modelo_aic, "Importancia variables (AIC)")
imp2 <- show_vars_importance(rf_modelo_bic, "Importancia variables (BIC)")
ggpubr::ggarrange(imp1, imp2, common.legend = TRUE)
show_vars_importance <- function(modelo, title) {
final<-modelo$finalModel
tabla<-as.data.frame(final$importance)
tabla<-tabla[order(tabla$MeanDecreaseAccuracy),]
vars <- rownames(tabla)
tabla$vars <- factor(vars, levels=unique(vars))
rownames(tabla) <- NULL
print(tabla %>% arrange(.,-MeanDecreaseAccuracy))
s <- tabla %>% arrange(.,-MeanDecreaseAccuracy) %>%
ggplot(aes(MeanDecreaseAccuracy, vars)) +
geom_col() +
geom_label(aes(label=round(MeanDecreaseAccuracy,3), x=MeanDecreaseAccuracy+0.01), size=3.5, colour="blue", fontface = "bold") +
scale_x_continuous(expand=expansion(c(0,0.04))) +
ggtitle(title) +
theme_bw() +
theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.title=element_blank(),
text = element_text(size=14, face = "bold"))
return(s)
}
imp1 <- show_vars_importance(rf_modelo_aic, "Importancia variables (AIC)")
imp2 <- show_vars_importance(rf_modelo_bic, "Importancia variables (BIC)")
ggpubr::ggarrange(imp1, imp2, common.legend = TRUE)
ggsave('./charts/01_feature_selection_comparacion_random_forest.png')
top4 <- c("Age", "mortality_rsi", "bmi", "month.8")
candidato.aic.top5 <- c("Age", "mortality_rsi", "bmi", "month.8", "ahrq_ccs")
candidato.bic.4 <- c("Age", "mortality_rsi", "bmi", "month.8", "baseline_osteoart")
candidato.bic.5 <- c("Age", "mortality_rsi", "bmi", "month.8", "ccsMort30Rate")
candidatos_4         <- list(candidato.rfe.lr.2, candidato.aic, candidato.bic, top4, candidato.rfe.rf,
candidato.bic.4, candidato.bic.5)
nombres_candidatos_4 <- c("RFE LR TOP 3", "AIC" , "BIC" , "AIC-BIC-TOP 4", "RFE RF TOP 5 (AIC TOP 5)",
"BIC (TOP 5 - baseline_osteoart)", "BIC (TOP 5 - ccsMort30Rate)")
union4 <- cruzada_logistica(surgical_dataset, target, candidatos_4, nombres_candidatos_4,
grupos = 5, repe = 5)
union4$modelo <- with(union4, reorder(modelo,tasa, mean))
t <- ggplot(union4, aes(x = modelo, y = tasa)) +
geom_boxplot() +
ggtitle("Comparacion (tasa fallos)") +
labs(color='Dataset')  +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
union4$modelo <- with(union4, reorder(modelo,auc, mean))
a <- ggplot(union4, aes(x = modelo, y = auc)) +
geom_boxplot() +
ggtitle("Comparacion (AUC)") +
labs(color='Dataset')  +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
ggpubr::ggarrange(t, a, common.legend = TRUE)
ggsave('./charts/01_feature_selection_comparacion_final.png')
union4$modelo <- with(union4, reorder(modelo,tasa, mean))
t <- ggplot(union4, aes(x = modelo, y = tasa)) +
geom_boxplot() +
ggtitle("Comparacion (tasa fallos)") +
labs(color='Dataset')  +
theme(text = element_text(size=12, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
union4$modelo <- with(union4, reorder(modelo,auc, mean))
a <- ggplot(union4, aes(x = modelo, y = auc)) +
geom_boxplot() +
ggtitle("Comparacion (AUC)") +
labs(color='Dataset')  +
theme(text = element_text(size=12, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
ggpubr::ggarrange(t, a, common.legend = TRUE)
ggsave('./charts/01_feature_selection_comparacion_final.png')
union4$modelo <- with(union4, reorder(modelo,tasa, mean))
t <- ggplot(union4, aes(x = modelo, y = tasa)) +
geom_boxplot() +
ggtitle("Comparacion (tasa fallos)") +
labs(color='Dataset')  +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
union4$modelo <- with(union4, reorder(modelo,auc, mean))
a <- ggplot(union4, aes(x = modelo, y = auc)) +
geom_boxplot() +
ggtitle("Comparacion (AUC)") +
labs(color='Dataset')  +
theme(text = element_text(size=13, face = "bold"), axis.text.x = element_text(angle = 45, vjust = 0.8))
ggpubr::ggarrange(t, a, common.legend = TRUE)
ggsave('./charts/01_feature_selection_comparacion_final.png')
candidato.bic.5
top4
andidatos_final         <- list(candidato.bic.5, top4)
nombres_candidatos_final <- c("BIC (TOP 5 - ccsMort30Rate)", "AIC-BIC-TOP 4")
union_final <- cruzada_logistica(surgical_dataset, target, candidatos_final, nombres_candidatos_final,
grupos = 5, repe = 10)
rm(candidatos_final)
rm(nombres_candidatos_final)
union_10_rep <- rbind(union4[union4$modelo %in% c("BIC (TOP 5 - month.8)", "AIC-BIC-TOP 4"), ], union_final)
union_10_rep$rep <- c(rep("5", 10), rep("10", 20))
# Tasa de fallos
p <- ggplot(union_10_rep, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"))
p
ggsave('./charts/01_boxplot_log_modelo1_error_10rep.jpeg')
# AUC
g <- ggplot(union_10_rep, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"))
g
ggsave('./charts/01_boxplot_log_modelo1_auc_10rep.jpeg')
ggpubr::ggarrange(p, g, common.legend = TRUE)
candidatos_final         <- list(candidato.bic.5, top4)
nombres_candidatos_final <- c("BIC (TOP 5 - ccsMort30Rate)", "AIC-BIC-TOP 4")
union_final <- cruzada_logistica(surgical_dataset, target, candidatos_final, nombres_candidatos_final,
grupos = 5, repe = 10)
rm(candidatos_final)
rm(nombres_candidatos_final)
union_10_rep <- rbind(union4[union4$modelo %in% c("BIC (TOP 5 - month.8)", "AIC-BIC-TOP 4"), ], union_final)
union_10_rep$rep <- c(rep("5", 10), rep("10", 20))
# Tasa de fallos
p <- ggplot(union_10_rep, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"))
p
ggsave('./charts/01_boxplot_log_modelo1_error_10rep.jpeg')
# AUC
g <- ggplot(union_10_rep, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"))
g
ggsave('./charts/01_boxplot_log_modelo1_auc_10rep.jpeg')
ggpubr::ggarrange(p, g, common.legend = TRUE)
candidatos_final         <- list(candidato.bic.5, top4)
nombres_candidatos_final <- c("BIC (TOP 5 - ccsMort30Rate)", "AIC-BIC-TOP 4")
union_final <- cruzada_logistica(surgical_dataset, target, candidatos_final, nombres_candidatos_final,
grupos = 5, repe = 10)
rm(candidatos_final)
rm(nombres_candidatos_final)
union_10_rep <- rbind(union4[union4$modelo %in% c("BIC (TOP 5 - ccsMort30Rate)", "AIC-BIC-TOP 4"), ], union_final)
union_10_rep$rep <- c(rep("5", 10), rep("10", 20))
p <- ggplot(union_10_rep, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") +
theme(text = element_text(size=13, face = "bold"))
p
ggsave('./charts/01_boxplot_log_modelo1_error_10rep.jpeg')
# AUC
g <- ggplot(union_10_rep, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") +
theme(text = element_text(size=13, face = "bold"))
g
ggsave('./charts/01_boxplot_log_modelo1_auc_10rep.jpeg')
ggpubr::ggarrange(p, g, common.legend = TRUE)
ggsave('./charts/01_feature_selection_comparacion_5_10_rep.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/GradientBoosting.RData")
tuneo_gradient_boosting_modelo1_10rep
tuneo_modelos1_2      <- rbind(tuneo_gradient_boosting_modelo1_10rep, tuneo_gradient_boosting_modelo2_10_rep)
tuneo_modelos1_2$repe <- c(rep("Modelo 1", 20), rep("Modelo 2", 20))
tuneo_modelos1_2$modelo <- with(tuneo_modelos1_2, reorder(modelo,tasa, mean))
p <- ggplot(tuneo_modelos1_2, aes(x = modelo, y = tasa, col = repe)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_10rep.png")
tuneo_modelos1_2$modelo <- with(tuneo_modelos1_2, reorder(modelo,auc, mean))
t <- ggplot(tuneo_modelos1_2, aes(x = modelo, y = auc, col = repe)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_auc_modelo1_10rep.png")
ggpubr::ggarrange(p, t)
ggpubr::ggarrange(p, t, common.legend = TRU)
ggpubr::ggarrange(p, t, common.legend = TRUE)
tuneo_modelos1_2
tuneo_modelos1_2      <- rbind(tuneo_gradient_boosting_modelo1_10rep, tuneo_gradient_boosting_modelo2_10_rep)
tuneo_modelos1_2$Modelo <- c(rep("Modelo 1", 20), rep("Modelo 2", 20))
tuneo_modelos1_2$bag.fraction <- c(rep("0.5", 10), rep("1", 10))
tuneo_modelos1_2$Modelo <- with(tuneo_modelos1_2, reorder(Modelo,tasa, mean))
p <- ggplot(tuneo_modelos1_2, aes(x = Modelo, y = tasa, col = bag.fraction)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(
text = element_text(size=14, face = "bold")
)
p
var_modelo1
tuneo_modelos1_2      <- rbind(tuneo_gradient_boosting_modelo1_10rep, tuneo_gradient_boosting_modelo2_10_rep)
tuneo_modelos1_2$Modelo <- c(rep("Modelo 1", 20), rep("Modelo 2", 20))
tuneo_modelos1_2$Modelo <- with(tuneo_modelos1_2, reorder(Modelo,tasa, mean))
p <- ggplot(tuneo_modelos1_2, aes(x = Modelo, y = tasa, col = bag.fraction)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_10rep.png")
tuneo_modelos1_2$modelo <- with(tuneo_modelos1_2, reorder(modelo,auc, mean))
t <- ggplot(tuneo_modelos1_2, aes(x = Modelo, y = auc, col = bag.fraction)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_auc_modelo1_10rep.png")
tuneo_modelos1_2      <- rbind(tuneo_gradient_boosting_modelo1_10rep, tuneo_gradient_boosting_modelo2_10_rep)
tuneo_modelos1_2$Modelo <- c(rep("Modelo 1", 20), rep("Modelo 2", 20))
tuneo_modelos1_2$bag.fraction <- c(rep("0.5", 10), rep("1", 10))
tuneo_modelos1_2$Modelo <- with(tuneo_modelos1_2, reorder(Modelo,tasa, mean))
p <- ggplot(tuneo_modelos1_2, aes(x = Modelo, y = tasa, col = bag.fraction)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_tasa_fallos_modelo1_10rep.png")
tuneo_modelos1_2$modelo <- with(tuneo_modelos1_2, reorder(modelo,auc, mean))
t <- ggplot(tuneo_modelos1_2, aes(x = Modelo, y = auc, col = bag.fraction)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo") + theme(
text = element_text(size=14, face = "bold")
)
ggsave("./charts/gradient_boosting/modelo1/05_auc_modelo1_10rep.png")
ggpubr::ggarrange(p, t, common.legend = TRUE)
ggsave("./charts/gradient_boosting_comparacion_bag_fraction.png")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SVM.RData")
svm_poly_5_rep_v2
svm_poly_5_rep_v2   <- as.data.frame(read_xlsx("./data/modelos_svm.xlsx", sheet = "SVM_polinomial_2"))
svm_poly_5_rep_v2[, "C"] <- as.numeric(svm_poly_5_rep_v2[, "C"])
svm_poly_5_rep_v2 <- rbind(svm_poly_5_rep_v2, svm_pol_2_2)
p <- ggplot(svm_poly_5_rep_v2[svm_poly_5_rep_v2$Modelo == 1 & svm_poly_5_rep_v2$C > 0.005, ], aes(x = factor(C), y = Accuracy,
color = factor(scale), pch = factor(scale))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
ggtitle("SVM Polinomial Modelo 1 (Grado 2)")  + theme(text = element_text(size=13, face = "bold"))
o
p
q <- ggplot(svm_poly_5_rep_v2[svm_poly_5_rep_v2$Modelo == 2, ], aes(x = factor(C), y = Accuracy,
color = factor(scale), pch = factor(scale))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
ggtitle("SVM Polinomial Modelo 2 (Grado 2)")  + theme(text = element_text(size=13, face = "bold"))
ggpubr::ggarrange(p, q)
ggsave('./charts/svm_polinomial.png')
ggpubr::ggarrange(p, q)
ggsave('./charts/svm_polinomial.png')
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Ensamblado.RData")
nombres_modelo_1
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
candidato.aic
candidato.bic
top4
candidato.rfe.lr.2
candidato.rfe.rf
candidato.bic.4
candidato.rfe.lr.2
candidato.aic
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
candidato.aic
dput(names(candidato.aic))
dput(candidato.aic)
dput(candidato.bic)
dput(candidato.rfe.lr)
dput(candidato.rfe.2)
dput(candidato.rfe.lr.2)
candidato.rfe.rf
dput(candidato.rfe.rf)
candidato.bic.4
dput(candidato.bic.4)
# ------------- Prueba seleccion de variables descartadas ---------------
# Objetivo: estudiar el comportamiento de los mejores modelos con las selecciones
#           de variables descartadas durante la practica
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(readxl)        # Lectura ficheros .xlsx
library(DescTools)     # Reordenacion de variales categoricas
library(ggrepel)       # Labels ggplot2
library(stringi)       # Tratamiento de strings
library(ggplotgui)     # Interfaz ggplot2
source("./librerias/librerias_propias.R")
source("./librerias/cruzada SVM binaria lineal.R")
})
# Funcion para calcular la tasa de fallos
tasafallos<-function(x,y) {
confu<-confusionMatrix(x,y)
tasa<-confu[[3]][1]
return(tasa)
}
# Funcion para calcular el AUC
auc<-function(x,y) {
curvaroc<-roc(response=x,predictor=y)
auc<-curvaroc$auc
return(auc)
}
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
# Separamos variable objetivo del resto
target <- "target"
#-- Modelo 2
var_modelo1 <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "Age")
var_modelo2 <- c("mortality_rsi", "bmi", "month.8", "Age")
#-- Parametros generales: semilla, numero de grupos y repeticiones
sinicio <- 1234; grupos <- 5; repe <- 10
#-- Recordemos los mejores modelos obtenidos hasta el momento
#   Bagging, XGboost, Random Forest, GBM, Avnnet y SVM RBF
#-- Seleccion de variables empleadas
# modelo_1 <- list("modelo1" = c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "Age"))
modelo_2 <- list("set_2_empleado" = c("mortality_rsi", "bmi", "month.8", "Age"))
#-- Recordemos las selecciones que desctartamos al comienzo
candidato_aic <- list("set_aic" = c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "baseline_cvd",
"dow.0", "Age", "moonphase.0", "month.0", "asa_status.0", "baseline_osteoart",
"baseline_charlson", "ahrq_ccs", "baseline_diabetes"))
candidato_bic <- list("set_bic" = c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0"))
candidato_rfe_lr_top3 <- list("set_rfe_lr_top3" = c("ccsMort30Rate", "mortality_rsi", "bmi"))
candidato_rfe_rf      <- list("set_rfe_rf_top5" = c("Age", "mortality_rsi", "ccsMort30Rate", "bmi", "ahrq_ccs"))
candidato_bic_top5    <- list("set_bic_top5" = c("mortality_rsi", "baseline_osteoart", "bmi", "month.8", "Age"))
sel_variables <- list(modelo_2, candidato_aic, candidato_bic, candidato_rfe_lr_top3, candidato_rfe_rf,
candidato_rfe_rf, candidato_bic_top5)
#-- Tuneo de los modelos finales
#  Bagging
for (vars in sel_variables) {
bagging <- cruzadarfbin(data=surgical_dataset, vardep=target,
listconti=vars[[1]],listclass=c(""),
grupos=grupos,sinicio=sinicio,repe=repe,nodesize=20,
mtry=length(vars[[1]]),ntree=900, sampsize=1000, replace = TRUE)
bagging$tipo <- "Bagging"
bagging$modelo <- names(vars)
modelos <- rbind(modelos, bagging)
}
#  Random Forest
for (vars  in sel_variables) {
random_forest <- cruzadarfbin(data=surgical_dataset,
vardep=target,listconti=vars[[1]],
listclass=c(""),grupos=grupos,sinicio=sinicio,repe=repe,
mtry=2,sampsize=1000, ntree=2000,nodesize=20,replace=TRUE)
random_forest$tipo <- "Random_Forest"
random_forest$modelo <- names(vars)
modelos <- rbind(modelos, random_forest)
}
# Gradient Boosting
for (vars  in sel_variables) {
gradient_boosting <- cruzadagbmbin(data=surgical_dataset,
vardep=target,listconti=vars[[1]],
listclass=c(""),grupos=grupos,sinicio=sinicio,repe=repe,
n.minobsinnode=20,shrinkage=0.2,n.trees=100,
interaction.depth=2, bag.fraction=0.5)
gradient_boosting$tipo   <-"Gradient_Boosting"
gradient_boosting$modelo <- names(vars)
modelos <- rbind(modelos, gradient_boosting)
}
# XGboost
for (vars  in sel_variables) {
xgboost <- cruzadaxgbmbin(data=surgical_dataset,vardep=target,
listconti=vars[[1]],listclass=c(""),
grupos=grupos,sinicio=sinicio,repe=repe,
min_child_weight=20,eta=0.1,nrounds=100,max_depth=6,
gamma=0,colsample_bytree=1,subsample=1)
xgboost$tipo   <-"XGboost"
xgboost$modelo <- names(vars)
modelos <- rbind(modelos, xgboost)
}
#-- Tuneo de los modelos finales
modelos <- data.frame()
#  Bagging
for (vars in sel_variables) {
bagging <- cruzadarfbin(data=surgical_dataset, vardep=target,
listconti=vars[[1]],listclass=c(""),
grupos=grupos,sinicio=sinicio,repe=repe,nodesize=20,
mtry=length(vars[[1]]),ntree=900, sampsize=1000, replace = TRUE)
bagging$tipo <- "Bagging"
bagging$modelo <- names(vars)
modelos <- rbind(modelos, bagging)
}
#  Random Forest
for (vars  in sel_variables) {
random_forest <- cruzadarfbin(data=surgical_dataset,
vardep=target,listconti=vars[[1]],
listclass=c(""),grupos=grupos,sinicio=sinicio,repe=repe,
mtry=2,sampsize=1000, ntree=2000,nodesize=20,replace=TRUE)
random_forest$tipo <- "Random_Forest"
random_forest$modelo <- names(vars)
modelos <- rbind(modelos, random_forest)
}
# Gradient Boosting
for (vars  in sel_variables) {
gradient_boosting <- cruzadagbmbin(data=surgical_dataset,
vardep=target,listconti=vars[[1]],
listclass=c(""),grupos=grupos,sinicio=sinicio,repe=repe,
n.minobsinnode=20,shrinkage=0.2,n.trees=100,
interaction.depth=2, bag.fraction=0.5)
gradient_boosting$tipo   <-"Gradient_Boosting"
gradient_boosting$modelo <- names(vars)
modelos <- rbind(modelos, gradient_boosting)
}
# XGboost
for (vars  in sel_variables) {
xgboost <- cruzadaxgbmbin(data=surgical_dataset,vardep=target,
listconti=vars[[1]],listclass=c(""),
grupos=grupos,sinicio=sinicio,repe=repe,
min_child_weight=20,eta=0.1,nrounds=100,max_depth=6,
gamma=0,colsample_bytree=1,subsample=1)
xgboost$tipo   <-"XGboost"
xgboost$modelo <- names(vars)
modelos <- rbind(modelos, xgboost)
}
modelos$modelo <- with(modelos,
reorder(modelo,tasa, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45), legend.position = "none")
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold"), legend.position = "none")
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 13), legend.position = "none")
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12), legend.position = "none")
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), legend.position = "none")
modelos$modelo <- with(modelos,
reorder(modelo,tasa, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
#   AUC
modelos$modelo <- with(modelos, reorder(modelo,auc, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = auc, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("AUC por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos
modelos$modelo <- with(modelos,
reorder(modelo, tipo,tasa, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos
modelos$modelo <- with(modelos,
reorder(modelo, tipo,tasa, mean))
modelos$modelo <- with(modelos,
reorder(modelo,tasa, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = tasa, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("Tasa de fallos por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
ggsave('./charts/sets_descartados_tasa_fallos.png')
modelos$modelo <- with(modelos, reorder(modelo,auc, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = auc, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("AUC por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos$modelo <- with(modelos, reorder(modelo,auc, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = auc, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("AUC por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
modelos$modelo <- with(modelos, reorder(modelo,auc, mean))
ggplot(modelos[modelos$tipo %in% c("Bagging", "Random_Forest", "XGboost", "Ensamblado"), ], aes(x = modelo, y = auc, colour = tipo)) +
geom_boxplot(adjust = 1.1) +
facet_grid( . ~ tipo, scales = "free", space = "free") +
ggtitle("AUC por modelo") +
theme(axis.text.x = element_text(angle = 45, face = "bold", size = 12, vjust = 0.5), text = element_text( face = "bold", size = 12), legend.position = "none")
ggsave('./charts/sets_descartados_auc.png')
