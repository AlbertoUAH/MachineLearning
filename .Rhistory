sizes = c(1:20), rfeControl = control.lr)
salida.rfe.lr
ggplot(salida.rfe.lr) + ggtitle("Variable importance Logistic Regression RFE")
salida.rfe.lr$optVariables
control.rf <- rfeControl(functions = rfFuncs, method = "cv",
number = 5, repeats = 5, seeds = vector.semillas)
salida.rfe.rf <- rfe(surgical_dataset[, vars], surgical_dataset[, target],
sizes = c(1:20), rfeControl = control.rf)
# Mejores variables RFE - RF (5 variables). Accuracy => 0.8902
salida.rfe.rf$optVariables
salida.rfe.rf
ggsave('./charts/01_feature_selection_RFE_LR_whole_dataset.png')
ggplot(salida.rfe.rf) + ggtitle("Variable importance Random Forest RFE")
ggsave('./charts/01_feature_selection_RFE_RF_whole_dataset.png')
salida.rfe.rf$optVariables
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables_DatasetCompleto.RData")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/ModeloCompleto.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
union_it_1
rm(union_it_1_temp)
rm(union_it_2_temp)
View(union_it_1)
View(comparar_modelos_red)
ggplot(union_it_1, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
source("./librerias/librerias_propias.R")
})
ggplot(union_it_1, aes(x = modelo, y = tasa)) +
geom_boxplot(fill = fill, colour = line,
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_it_1, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_it_1
ggplot(union_it_1, aes(x = num_iter, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_it_1, aes(x = num_iter, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggplot(union_it_1, aes(x = num_iter, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/02_boxplot_nnet_modelo1_iteraciones_error.jpeg')
ggplot(union_it_1, aes(x = num_iter, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/02_boxplot_nnet_modelo1_iteraciones_AUC.jpeg')
ggplot(union_it_2, aes(x = num_iter, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_it_2
union_it_2
for(num_iteraciones in c(50, 100, 200, 300, 400, 500)) {
rep(as.character(num_iteraciones), 5)
}
union_it_2  <- data.frame(tasa = numeric(), auc = numeric(), num_iter = character())
for(num_iteraciones in c(50, 100, 200, 300, 400, 500)) {
#union_it_1_temp <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
#                                    listconti=var_modelo1, listclass=c(""),
#                                    grupos=5,sinicio=1234,repe=5, size=20,
#                                    decay=0.1,repeticiones=5,itera=num_iteraciones)[[1]]
#union_it_1_temp$num_iter <- rep(as.character(num_iteraciones), 5)
#union_it_1_temp$modelo   <- NULL
#union_it_1 <- rbind(union_it_1, union_it_1_temp)
union_it_2_temp <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo2, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=20,
decay=0.01,repeticiones=5,itera=num_iteraciones)[[1]]
union_it_2_temp$num_iter <- rep(as.character(num_iteraciones), 5)
union_it_2_temp$modelo   <- NULL
union_it_2 <- rbind(union_it_2, union_it_2_temp)
union_it_2_temp$num_iter <- rep(as.character(num_iteraciones), nrow(union_it_2_temp))
print(paste0(num_iteraciones, " - done!"))
}
rm(union_it_1_temp)
rm(union_it_2_temp)
union_it_2
ggplot(union_it_2, aes(x = num_iter, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/02_boxplot_nnet_modelo2_iteraciones_error.jpeg')
ggplot(union_it_2, aes(x = num_iter, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/02_boxplot_nnet_modelo2_iteraciones_AUC.jpeg')
View(cruzadaavnnetbin)
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
source("./librerias/librerias_propias.R")
})
size.candidato.1 <- c(5, 10, 15, 20, 25, 30, 35)
decay.candidato.1 <- c(0.1, 0.01, 0.001)
cvnnet.candidato.1 <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=size.candidato.1,
decay=decay.candidato.1,repeticiones=5,itera=200)
stopCluster(cluster)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
cvnnet.candidato.1 <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo1, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=size.candidato.1,
decay=decay.candidato.1,repeticiones=5,itera=200)
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
size.candidato.2 <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
decay.candidato.2 <- c(0.1, 0.01, 0.001)
cvnnet.candidato.2 <- cruzadaavnnetbin(data=surgical_dataset,vardep=target,
listconti=var_modelo2, listclass=c(""),
grupos=5,sinicio=1234,repe=5, size=size.candidato.2,
decay=decay.candidato.2,repeticiones=5,itera=200)
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
union_2
union_3
paste0(target, "~" ,
paste0(candidato.bic.2, collapse = "+"))
paste0(target, "~" , paste0(candidato.bic.2, collapse = "+"))
paste0(target, "~" , paste0(var_modelo1, collapse = "+"))
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
source("./librerias/librerias_propias.R")
})
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
control <- trainControl(method = "repeatedcv",number=5,repeats=5,
savePredictions = "all",classProbs=TRUE)
# Aplico caret y construyo modelos finales
avnnetgrid_1 <-  expand.grid(size=20,decay=0.1,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(paste0(target, "~" , paste0(var_modelo1, collapse = "+")),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=trace)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(paste0(target, "~" , paste0(var_modelo2, collapse = "+")),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=trace)
avnnetgrid_1 <-  expand.grid(size=20,decay=0.1,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(paste0(target, "~" , paste0(var_modelo1, collapse = "+")),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=trace)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(paste0(target, "~" , paste0(var_modelo2, collapse = "+")),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=trace)
paste0(target, "~" , paste0(var_modelo1, collapse = "+"))
avnnetgrid_1 <-  expand.grid(size=20,decay=0.1,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=trace)
avnnetgrid_1 <-  expand.grid(size=20,decay=0.1,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=trace)
as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+")))
sum(is.na(surgical_dataset))
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=trace)
trace()
avnnetgrid_1 <-  expand.grid(size=20,decay=0.1,bag=FALSE)
set.seed(1234)
avnnet_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_1,trace=FALSE)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(paste0(target, "~" , paste0(var_modelo2, collapse = "+")),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=FALSE)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),data=databis,
method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=FALSE)
avnnetgrid_2 <-  expand.grid(size=20,decay=0.01,bag=FALSE)
set.seed(1234)
avnnet_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=avnnetgrid_2,trace=FALSE)
source("./librerias/librerias_propias.R")
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
names(surgical_test_data)
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(length(pred_vector))
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(pred_vector)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "raw")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(pred_vector)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "proba")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(pred_vector)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(pred_vector)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred < corte,
"No",
"Yes"
))
print(pred)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred$No > pred$Yes,
"No",
"Yes"
))
print(pred)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
# Funcion para obtener la matriz de confusion de las predicciones resultantes
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred$No > pred$Yes,
"No",
"Yes"
))
print(pred_vector)
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
7781+990
7781+1000
matriz_conf_2 <- matriz_confusion_predicciones(avnnet_2, NULL, surgical_test_data, 0.5)
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred$No > pred$Yes,
"No",
"Yes"
))
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1
matriz_conf_2
matriz_confusion_predicciones <- function(modelo = "glm", formula, dataset, corte) {
if (modelo == "glm") {
modelo <- glm(formula,
data = dataset,
family = binomial(link="logit")
)
}
pred <- predict(modelo, dataset, type = "prob")
pred_vector <- as.factor(ifelse(
pred$No > corte,
"No",
"Yes"
))
matriz_confusion <- confusionMatrix(dataset$target, pred_vector)
return(matriz_confusion)
}
matriz_conf_1 <- matriz_confusion_predicciones(avnnet_1, NULL, surgical_test_data, 0.5)
matriz_conf_1
matriz_conf_2
rm(avnnetgrid_1)
rm(avnnetgrid_2)
stopCluster(cluster)
save.image(file = "./rdata/RedesNeuronales.RData")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
union3
nombres_candidatos_3
candidatos_3         <- list(candidato.aic, candidato.aic.2, candidato.bic, candidato.bic.2,
candidato.rfe.lr, candidato.rfe.lr.2, candidato.rfe.rf)
nombres_candidatos_3 <- c("LOGISTICA AIC", "LOGISTICA AIC (sin 2 variables)" ,"LOGISTICA BIC", "LOGISTICA BIC (sin asa.status)" , "RFE LR TOP 18", "RFE LR TOP 3", "RFE RF TOP 5")
union3 <- cruzada_logistica(surgical_dataset, target, candidatos_3, nombres_candidatos_3,
grupos = 5, repe = 5)
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(ggplot2)       # Libreria grafica
source("./librerias/librerias_propias.R")
source("./librerias/funcion steprepetido binaria.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
candidatos_3         <- list(candidato.aic, candidato.aic.2, candidato.bic, candidato.bic.2,
candidato.rfe.lr, candidato.rfe.lr.2, candidato.rfe.rf)
nombres_candidatos_3 <- c("LOGISTICA AIC", "LOGISTICA AIC (sin 2 variables)" ,"LOGISTICA BIC", "LOGISTICA BIC (sin asa.status)" , "RFE LR TOP 18", "RFE LR TOP 3", "RFE RF TOP 5")
union3 <- cruzada_logistica(surgical_dataset, target, candidatos_3, nombres_candidatos_3,
grupos = 5, repe = 5)
union3
union3
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
var_modelo1
var_modelo2
readxl::read_excel("./excel_modelos.xlsx")
readxl::read_excel("./ComparativaModelos.xlsx")
library(readxl)        # Lectura de ficheros Excel
modelos_actuales <- read_excel("./ComparativaModelos.xlsx")
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/compartivas/02_log_avnnet.jpeg')
as.data.frame(read_excel("./ComparativaModelos.xlsx"))
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx"))
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/compartivas/02_log_avnnet.jpeg')
modelos_actuales
sapply(modelos_actuales, class)
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/compartivas/02_log_avnnet.jpeg')
ggplot(union_it_2, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/comparativas/02_log_avnnet.jpeg')
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/compartivas/02_log_avnnet.jpeg')
ggplot(modelos_actuales, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/comparativas/02_log_avnnet.jpeg')
#---- Guardamos el fichero RData
save.image(file = "./rdata/RedesNeuronales.RData")
