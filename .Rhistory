ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo1_5_10_folds.png")
sampsizes.2_aux <- list(200, 300, 400, 500)
bagging_modelo1_3_10folds_v2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.2_aux, mtry = mtry.1,
ntree = n.trees.1, grupos = 10, repe = 20)
rm(sampsizes.2_aux)
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
mtry.2
var_modelo2
n.trees.2
sampsizes.2 <- list(1, 100, 500, 1000, 2000, 3000, 4600)
nodesizes.2 <- list(5, 10, 20, 30, 40, 50, 100)
bagging_modelo2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 5)
bagging_modelo2$nodesizes <- as.numeric(c(data.frame(strsplit(bagging_modelo2$modelo, '+', fixed = T))[1,]))
bagging_modelo2$sampsizes <- as.numeric(c(data.frame(strsplit(bagging_modelo2$modelo, '+', fixed = T))[2,]))
ggplot(bagging_modelo2, aes(x=factor(sampsizes), y=tasa,
colour=factor(nodesizes))) +
geom_point(position=position_dodge(width=0.3),size=2, shape = 18) +
ggtitle("Distribucion de la tasa por sampsizes y nodesizes (Modelo 2)")
ggsave("./charts/bagging/distribuciones/03_distribucion_tasa_error_modelo2.png")
#-- Distribucion del AUC
ggplot(bagging_modelo2, aes(x=factor(sampsizes), y=auc,
colour=factor(nodesizes))) +
geom_point(position=position_dodge(width=0.3),size=2, shape = 18) +
ggtitle("Distribucion del AUC por sampsizes y nodesizes (Modelo 2)")
ggsave("./charts/bagging/distribuciones/03_distribucion_auc_modelo2.png")
nodesizes.2 <- list(10)
sampsizes.2 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo2_2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 10)
nodesizes.2 <- list(20)
sampsizes.2 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo2_3 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 10)
nodesizes.2 <- list(30)
sampsizes.2 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo2_4 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 10)
nodesizes.2 <- list(50)
sampsizes.2 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo2_5 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 10)
nodesizes.2 <- list(5)
sampsizes.2 <- list(1, 500, 1000, 1500, 2000, 2500)
bagging_modelo2_5 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.2,
sampsizes = sampsizes.2, mtry = mtry.2,
ntree = n.trees.2, grupos = 5, repe = 10)
rm(bagging_modelo2_5)
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
nodesizes.1
rm(nodesizes.2)
mtry.2
n.trees.2
var_modelo2
nodesizes.1 <- list(10)
sampsizes.2_aux <- list(1, 500, 1000, 1500)
bagging_modelo2_2_10folds <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.1,
sampsizes = sampsizes.2_aux, mtry = mtry.2,
ntree = n.trees.2, grupos = 10, repe = 20)
rm(sampsizes.2_aux)
rm(nodesizes.1)
# Nodesize 20
nodesizes.1 <- list(20)
sampsizes.2_aux <- list(1, 500, 1000, 1500)
bagging_modelo2_3_10folds <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = nodesizes.1,
sampsizes = sampsizes.2_aux, mtry = mtry.2,
ntree = n.trees.2, grupos = 10, repe = 20)
rm(sampsizes.2_aux)
rm(nodesizes.1)
union_bagging_modelo2$modelo <- with(union_bagging_modelo2,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_5rep.png")
union_bagging_modelo2 <- rbind(
bagging_modelo2_2[bagging_modelo2_2$modelo == "10+1", ],
bagging_modelo2_2[bagging_modelo2_2$modelo == "10+500", ],
bagging_modelo2_2[bagging_modelo2_2$modelo == "10+1000", ],
bagging_modelo2_2[bagging_modelo2_2$modelo == "10+1500", ],
bagging_modelo2_3[bagging_modelo2_3$modelo == "20+1", ],
bagging_modelo2_3[bagging_modelo2_3$modelo == "20+500", ],
bagging_modelo2_3[bagging_modelo2_3$modelo == "20+1000", ],
bagging_modelo2_3[bagging_modelo2_3$modelo == "20+1500", ]
)
union_bagging_modelo2$config <- rep("5_folds-10_rep", 80)
union_bagging_modelo2$modelo <- with(union_bagging_modelo2,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_5rep.png")
union_bagging_modelo2$modelo <- with(union_bagging_modelo2,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2, aes(x = modelo, y = auc, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_5rep.png")
union_bagging_modelo2_10folds <- rbind(
bagging_modelo2_2_10folds[bagging_modelo2_2_10folds$modelo == "10+1", ],
bagging_modelo2_2_10folds[bagging_modelo2_2_10folds$modelo == "10+500", ],
bagging_modelo2_2_10folds[bagging_modelo2_2_10folds$modelo == "10+1000", ],
bagging_modelo2_2_10folds[bagging_modelo2_2_10folds$modelo == "10+1500", ],
bagging_modelo2_3_10folds[bagging_modelo2_3_10folds$modelo == "20+1", ],
bagging_modelo2_3_10folds[bagging_modelo2_3_10folds$modelo == "20+500", ],
bagging_modelo2_3_10folds[bagging_modelo2_3_10folds$modelo == "20+1000", ],
bagging_modelo2_3_10folds[bagging_modelo2_3_10folds$modelo == "20+1500", ]
)
union_bagging_modelo2_10folds$config <- rep("10_folds-20_rep", 80)
union_bagging_modelo2_final          <- rbind(union_bagging_modelo2,
union_bagging_modelo2_10folds)
#   Modelos candidatos:
union_bagging_modelo2_10folds$modelo <- with(union_bagging_modelo2_10folds,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_10folds, aes(x = modelo, y = tasa, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
union_bagging_modelo2_10folds$modelo <- with(union_bagging_modelo2_10folds,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_10folds, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = auc, col = rep)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_10rep.png")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = auc, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_10rep.png")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggplot(union_bagging_modelo2, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_bagging_modelo2$modelo <- with(union_bagging_modelo2,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = auc, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_10rep.png")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = auc, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,tasa, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = tasa, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_tasa_modelo2_10rep.png")
#-- Distribucion del AUC
#
union_bagging_modelo2_final$modelo <- with(union_bagging_modelo2_final,
reorder(modelo,auc, mean))
ggplot(union_bagging_modelo2_final, aes(x = modelo, y = auc, col = config)) +
geom_boxplot(alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave("./charts/bagging/bis_03_comparacion_final_auc_modelo2_10rep.png")
var_modelo2
surgical_test_data <- fread("./data/surgical_test_data.csv", data.table = FALSE)
names(surgical_test_data)[35] <- "target"
surgical_test_data$target     <- as.factor(surgical_test_data$target)
control <- trainControl(method = "repeatedcv",number=5,repeats=10,
savePredictions = "all",classProbs=TRUE)
mtry.1
mtry.2
set.seed(1234)
bagging_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 10, sampsize = 500, ntree = n.trees.1, replace = TRUE)
matriz_conf_1 <- matriz_confusion_predicciones(bagging_1, NULL, surgical_test_data, 0.5)
#-- Modelo 1
rfgrid.1 <-expand.grid(mtry=mtry.1)
set.seed(1234)
bagging_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 10, sampsize = 500, ntree = n.trees.1, replace = TRUE)
matriz_conf_1 <- matriz_confusion_predicciones(bagging_1, NULL, surgical_test_data, 0.5)
matriz_conf_1
set.seed(1234)
bagging_1_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 10, sampsize = 1000, ntree = n.trees.1, replace = TRUE)
matriz_conf_1_1 <- matriz_confusion_predicciones(bagging_1_1, NULL, surgical_test_data, 0.5)
matriz_conf_1_1
rfgrid.2 <-expand.grid(mtry=mtry.2)
set.seed(1234)
bagging_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 10, sampsize = 500, ntree = n.trees.2, replace = TRUE)
matriz_conf_2 <- matriz_confusion_predicciones(bagging_2, NULL, surgical_test_data, 0.5)
matriz_conf_2
bagging_2_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 10, sampsize = 1000, ntree = n.trees.2, replace = TRUE)
matriz_conf_2_2 <- matriz_confusion_predicciones(bagging_2_2, NULL, surgical_test_data, 0.5)
matriz_conf_2_2
bagging_2_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 10, sampsize = 1, ntree = n.trees.2, replace = TRUE)
matriz_conf_2_2 <- matriz_confusion_predicciones(bagging_2_2, NULL, surgical_test_data, 0.5)
bagging_2_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 10, ntree = n.trees.2, replace = TRUE)
matriz_conf_2_2 <- matriz_confusion_predicciones(bagging_2_2, NULL, surgical_test_data, 0.5)
matriz_conf_2_2
set.seed(1234)
bagging_1_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 10, ntree = n.trees.1, replace = TRUE)
matriz_conf_1_1 <- matriz_confusion_predicciones(bagging_1_1, NULL, surgical_test_data, 0.5)
set.seed(1234)
bagging_2_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.2,
nodesize = 10, sampsize = 1000, ntree = n.trees.2, replace = TRUE)
matriz_conf_2_2 <- matriz_confusion_predicciones(bagging_2_2, NULL, surgical_test_data, 0.5)
matriz_conf_2_2
set.seed(1234)
bagging_1_1 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="rf", trControl = control,tuneGrid = rfgrid.1,
nodesize = 10, sampsize = 1000, ntree = n.trees.1, replace = TRUE)
matriz_conf_1_1 <- matriz_confusion_predicciones(bagging_1_1, NULL, surgical_test_data, 0.5)
matriz_conf_1_1
union_bagging_modelo1_10folds
union_bagging_modelo1_final
sampsizes.2_aux <- list(200, 300, 400, 500)
bagging_modelo2_3_10folds_v2 <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo2,
nodesizes = 10,
sampsizes = sampsizes.2_aux, mtry = mtry.2,
ntree = n.trees.2, grupos = 10, repe = 20)
rm(sampsizes.2_aux)
union_bagging_modelo2_final
modelos_actuales <- as.data.frame(read_excel("./ComparativaModelos.xlsx",
sheet = "bagging"))
modelos_actuales$tasa <- as.numeric(modelos_actuales$tasa)
modelos_actuales$auc <- as.numeric(modelos_actuales$auc)
bagging_modelo_sin_reemp <- tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = 10,
sampsizes = 500, mtry = mtry.1,
ntree = n.trees.1, grupos = 5, repe = 10, replace = FALSE)
bagging_modelo_sin_reemp$modelo <- "BAG. MODELO 1 (no reemp)"
modelos_actuales <- rbind(modelos_actuales, bagging_modelo_sin_reemp)
modelos_actuales
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,tasa, mean))
ggplot(modelos_actuales, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo")
ggsave('./charts/comparativas/03_log_avnnet_bagging_tasa.jpeg')
modelos_actuales$modelo <- with(modelos_actuales,
reorder(modelo,auc, mean))
ggplot(modelos_actuales, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo")
ggsave('./charts/comparativas/03_log_avnnet_bagging_auc.jpeg')
modelos_actuales_zoomed <- modelos_actuales[modelos_actuales$modelo %in% c("BAG. MODELO 1", "BAG. MODELO 2", "BAG. MODELO 1 (no reemp)"), ]
modelos_actuales_zoomed$modelo <- with(modelos_actuales_zoomed,
reorder(modelo,tasa, mean))
ggplot(modelos_actuales_zoomed, aes(x = modelo, y = tasa)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("Tasa de fallos por modelo (solo BAGGING)")
ggsave('./charts/bagging/03_FINAL_tasa.jpeg')
modelos_actuales_zoomed$modelo <- with(modelos_actuales_zoomed,
reorder(modelo,auc, mean))
ggplot(modelos_actuales_zoomed, aes(x = modelo, y = auc)) +
geom_boxplot(fill =  "#4271AE", colour = "#1F3552",
alpha = 0.7) +
scale_x_discrete(name = "Modelo") +
ggtitle("AUC por modelo (solo BAGGING)")
ggsave('./charts/bagging/03_FINAL_auc.jpeg')
stopCluster(cluster)
#---- Guardamos el fichero RData
save.image(file = "./rdata/Bagging.RData")
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Bagging.RData")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
set.seed(1234)
avnnet_1_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=expand.grid(size=20,decay=0.01,bag=FALSE))
matriz_conf_1_2 <- matriz_confusion_predicciones(avnnet_1_2, NULL, surgical_test_data, 0.5)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(1234)
avnnet_1_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo1, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=expand.grid(size=20,decay=0.01,bag=FALSE))
matriz_conf_1_2 <- matriz_confusion_predicciones(avnnet_1_2, NULL, surgical_test_data, 0.5)
matriz_conf_1_2
1379-1415
1379-1439
set.seed(1234)
avnnet_2_2 <- train(as.formula(paste0(target, "~" , paste0(var_modelo2, collapse = "+"))),
data=surgical_dataset, method="avNNet",linout = FALSE,maxit=200,repeats=5,
trControl=control,tuneGrid=expand.grid(size=15,decay=0.01,bag=FALSE))
matriz_conf_2_2 <- matriz_confusion_predicciones(avnnet_2_2, NULL, surgical_test_data, 0.5)
matriz_conf_2_2
1431-1389
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RedesNeuronales.RData")
# ------------- Random Forest ---------------
# Objetivo: elaborar el mejor modelo de Random Forest de acuerdo
#           a los valores de prediccion obtenidos tras variar los parametros
#           sampsize,
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(randomForest)  # Seleccion del numero de arboles
library(readxl)        # Lectura de ficheros Excel
source("./librerias/librerias_propias.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
# Separamos variable objetivo del resto
target <- "target"
#--- Variables de los modelos candidatos
#--  Modelo 1
var_modelo1 <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "Age")
#-- Modelo 2
var_modelo2 <- c("mortality_rsi", "bmi", "month.8", "Age")
mtry.1 <- 5
mtry.2 <- 4
err.rates.1 <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = c(2), ntree = 5000, nodesize = 10, seed = 1234)
plot(err.rates.1[,1], col = "red", type = 'p',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
plot(err.rates.1[,1], col = "red", type = 'l',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
err.rates.1 <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = c(5), ntree = 5000, nodesize = 10, seed = 1234)
plot(err.rates.1[,1], col = "red", type = 'l',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
err.rates.1 <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = c(5), ntree = 5000, nodesize = 10, seed = 1234)
plot(err.rates.1[,1], col = "red", type = 'l',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
colors = c("darkgreen", "blue", "purple")
for(mtry in c(3,4,5)) {
err.rates.aux <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = mtry, ntree = 5000, nodesize = 10, seed = 1234)
lines(err.rates.aux[,1], col = colors[mtry-2], type = 'l')
rm(err.rates.aux)
}
rm(colors)
err.rates.1 <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = c(5), ntree = 5000, nodesize = 10, seed = 1234)
plot(err.rates.1[,1], col = "red", type = 'l',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
colors = c("darkgreen", "blue", "purple")
for(mtry in c(2,3,4)) {
err.rates.aux <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = mtry, ntree = 5000, nodesize = 10, seed = 1234)
lines(err.rates.aux[,1], col = colors[mtry-1], type = 'l')
rm(err.rates.aux)
}
rm(colors)
View(mostrar_err_rate)
install.packages("broom")
broom::augment(surgical_dataset)
legend("top", legend = c("MTRY = 5","MTRY = 2", "MTRY = 3", "MTRY = 4") ,
col = c('red', 'darkgreen', 'blue', 'purple') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
abline(h = 0.10234)
abline(h = 0.10231)
abline(h = 0.10221)
err.rates.1 <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = c(5), ntree = 5000, nodesize = 10, seed = 1234)
plot(err.rates.1[,1], col = "red", type = 'l',
main = 'Error rate by nº trees (Modelo 1)', xlab = 'Number of trees', ylab = 'Error rate', ylim = c(0.09, 0.13))
colors = c("darkgreen", "blue", "purple")
for(mtry in c(2,3,4)) {
err.rates.aux <- review_ntrees(surgical_dataset, factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age,
mtry = mtry, ntree = 5000, nodesize = 10, seed = 1234)
lines(err.rates.aux[,1], col = colors[mtry-1], type = 'l')
rm(err.rates.aux)
}
abline(h = 0.10221, lty = 'dashed')
legend("top", legend = c("MTRY = 5","MTRY = 2", "MTRY = 3", "MTRY = 4") ,
col = c('red', 'darkgreen', 'blue', 'purple') , bty = "n", horiz = FALSE,
lty=1, cex = 0.75)
rm(colors)
target
mtry.1 <- c(2,3,4,5)
cruzadarfbin(data=surgical_dataset, vardep=target,listconti=var_modelo1,listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=10,mtry=mtry.1,ntree=2500,replace = TRUE)
install.packages("randomForestSRC")
c(1:9, seq(10, 150, by = 5))
tune.nodesize(factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age, surgical_dataset,
nodesizeTry = c(5, 10, 20, 30, 40, 50, 100),
sampsize = function(x){min(x * .632, max(150, x ^ (4/5)))},
nsplit = 1, trace = FALSE, ...)
randomForestSRC::tune.nodesize(factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age, surgical_dataset,
nodesizeTry = c(5, 10, 20, 30, 40, 50, 100),
sampsize = function(x){min(x * .632, max(150, x ^ (4/5)))},
nsplit = 1, trace = TRUE)
randomForestSRC::tune.nodesize(factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age, surgical_dataset,
nodesizeTry = c(5, 10, 20, 30, 40, 50, 100),
sampsize = 500)},
nsplit = 1, trace = TRUE)
randomForestSRC::tune.nodesize(factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age, surgical_dataset,
nodesizeTry = c(5, 10, 20, 30, 40, 50, 100),
sampsize = 500,
nsplit = 1, trace = TRUE)
randomForestSRC::tune.nodesize(factor(target)~mortality_rsi+ccsMort30Rate+bmi+month.8+Age, surgical_dataset,
nodesizeTry = c(1, 5, 10, 20, 30, 40, 50, 100),
sampsize = 500,
nsplit = 1, trace = TRUE)
mtry.1 <- c(1)
cruzadarfbin(data=surgical_dataset, vardep=target,listconti=var_modelo1,listclass=c(""),
grupos=5,sinicio=1234,repe=5,nodesize=10,mtry=mtry.1,ntree=2500,replace=TRUE)
table(surgical_dataset$target)
4351/(4351+1503)
bagging_modelo1_mtry2 <-  tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = 2,
ntree = 2500, grupos = 5, repe = 5)
bagging_modelo1_mtry2$nodesizes <- as.numeric(c(data.frame(strsplit(bagging_modelo1_mtry2$modelo, '+', fixed = T))[1,]))
bagging_modelo1_mtry2$sampsizes <- as.numeric(c(data.frame(strsplit(bagging_modelo1_mtry2$modelo, '+', fixed = T))[2,]))
sampsizes.1 <- list(1, 100, 500, 1000, 2000, 3000, 4600)
nodesizes.1 <- list(5, 10, 20, 30, 40, 50, 100)
bagging_modelo1_mtry2 <-  tuneo_bagging(surgical_dataset, target = target,
lista.continua = var_modelo1,
nodesizes = nodesizes.1,
sampsizes = sampsizes.1, mtry = 2,
ntree = 2500, grupos = 5, repe = 5)
bagging_modelo1_mtry2$nodesizes <- as.numeric(c(data.frame(strsplit(bagging_modelo1_mtry2$modelo, '+', fixed = T))[1,]))
bagging_modelo1_mtry2$sampsizes <- as.numeric(c(data.frame(strsplit(bagging_modelo1_mtry2$modelo, '+', fixed = T))[2,]))
save.image("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/RandomForest.RData")
