# Objetivo: estudiar el mejor punto de corte
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(readxl)        # Lectura ficheros .xlsx
library(DescTools)     # Reordenacion de variales categoricas
library(ggrepel)       # Labels ggplot2
library(stringi)       # Tratamiento de strings
library(ggplotgui)     # Interfaz ggplot2
library(visualpred)    # Visualizacion algoritmos clasificacion
library(egg)           # Layouts de ggplot2
source("./librerias/librerias_propias.R")
source("./librerias/funcion resultadosrf.R")
source("./librerias/funcion resultadosgbm.R")
source("./librerias/funcion resultadosxgboost.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo1,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
target <- "target"
result_rf <- famdcontour(dataf=surgical_dataset,listconti=var_modelo1,listclass=c(""),vardep=target,
title="Random Forest",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_rf[2]
result_rf[4]
ggsave('./charts/temp.png')
library(rpart)
library(rpart.plot)
rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class")
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class"))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", cp = 0.005))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", cp = 0.001))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", max_depth=50))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", maxdepth=50))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=10))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=20))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=1))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=1, subset = 1000))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=1, subset = 0.1))
rpart.plot(rpart(factor(target) ~ Age + mortality_rsi + bmi + ahrq_ccs, data=surgical_dataset, method = "class", minsplit=30, xval=1, subset = 1))
ggplot(surgical_dataset, aes(x = ahrq_ccs, fill = factor(complication))) +
geom_boxplot() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
ggplot(surgical_dataset, aes(x = ahrq_ccs, fill = factor(target))) +
geom_boxplot() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
randomFores
top4_soloaic <- c("Age", "mortality_rsi", "ahrq_ccs", "bmi")
top4 <- c("Age", "mortality_rsi", "bmi", "month.8")
# ------------- Seleccion de variables ---------------
# Objetivo: realizar una seleccion previa de variables empleando
# -> metodos step aic + bic
# -> rfe
# -> Por ultimo, elegir las variables candidatas por medio de glm
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(ggplot2)       # Libreria grafica
source("./librerias/librerias_propias.R")
source("./librerias/funcion steprepetido binaria.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
# Por el momento, eliminamos ccsComplicationRate y complication_rsi
ccsComplicationRate <- surgical_dataset$ccsComplicationRate
complication_rsi    <- surgical_dataset$complication_rsi
surgical_dataset$complication_rsi <- NULL; surgical_dataset$ccsComplicationRate <- NULL
surgical_dataset$baseline_dementia <- NULL; surgical_dataset$mort30 <- NULL
train_rf_model <- function(dataset, formula, mtry, ntree, grupos, repe,
nodesize, seed) {
set.seed(seed)
rfgrid <- expand.grid(mtry=c(mtry))
control <- trainControl(method = "repeatedcv",number=grupos, repeats=repe,
savePredictions = "all",classProbs = TRUE)
rf<- train(formula,data=dataset,
method="rf",trControl=control,tuneGrid=rfgrid,
linout = FALSE,ntree=ntree,nodesize=nodesize,sampsize=1000,
replace=TRUE, importance=TRUE)
return(rf)
}
train_rf_model <- function(dataset, formula, mtry, ntree, grupos, repe,
nodesize, seed) {
set.seed(seed)
rfgrid <- expand.grid(mtry=c(mtry))
control <- trainControl(method = "repeatedcv",number=grupos, repeats=repe,
savePredictions = "all",classProbs = TRUE)
rf<- train(formula,data=dataset,
method="rf",trControl=control,tuneGrid=rfgrid,
linout = FALSE,ntree=ntree,nodesize=nodesize,sampsize=1000,
replace=TRUE, importance=TRUE)
return(rf)
}
# del modelo aumenta
rf_modelo_bic <- train_rf_model(surgical_dataset,
as.formula(paste0("target~", paste0(top4, collapse = "+"))),
mtry = 2, ntree = 2000, grupos = 5, repe = 5, nodesize = 10,
seed = 1234)
rf_modelo_aic   <- train_rf_model(surgical_dataset,
as.formula(paste0("target~", paste0(top4_soloaic, collapse = "+"))),
mtry = 2, ntree = 2000, grupos = 5, repe = 5, nodesize = 10,
seed = 1234)
imp1 <- show_vars_importance(rf_modelo_aic, "Con ahrq_ccs")
imp2 <- show_vars_importance(rf_modelo_bic, "Con month.8")
ggpubr::ggarrange(imp1, imp2, common.legend = TRUE)
show_vars_importance <- function(modelo, title) {
final<-modelo$finalModel
tabla<-as.data.frame(final$importance)
tabla<-tabla[order(tabla$MeanDecreaseAccuracy),]
vars <- rownames(tabla)
tabla$vars <- factor(vars, levels=unique(vars))
rownames(tabla) <- NULL
print(tabla %>% arrange(.,-MeanDecreaseAccuracy))
s <- tabla %>% arrange(.,-MeanDecreaseAccuracy) %>%
ggplot(aes(MeanDecreaseAccuracy, vars)) +
geom_col() +
geom_label(aes(label=round(MeanDecreaseAccuracy,3), x=MeanDecreaseAccuracy+0.01), size=3.5, colour="blue", fontface = "bold") +
scale_x_continuous(expand=expansion(c(0,0.04))) +
ggtitle(title) +
theme_bw() +
theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.title=element_blank(),
text = element_text(size=14, face = "bold"))
return(s)
}
imp1 <- show_vars_importance(rf_modelo_aic, "Con ahrq_ccs")
imp2 <- show_vars_importance(rf_modelo_bic, "Con month.8")
ggpubr::ggarrange(imp1, imp2, common.legend = TRUE)
ggsave('./charts/importancia_ahrq_ccs_month_8.png')
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
ggplot(surgical_dataset, aes(x = ahrq_ccs, fill = factor(target))) +
geom_boxplot() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
ggplot(surgical_dataset, aes(x = ahrq_ccs, fill = factor(complication))) +
geom_boxplot() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
ggplot(surgical_dataset, aes(x = ahrq_ccs, fill = factor(complication))) +
geom_bar() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
ggplot(surgical_dataset, aes(x = factor(ahrq_ccs), fill = factor(complication))) +
geom_bar() +
theme_minimal() + ggtitle("mortality_rsi boxplot by target") + theme(legend.position = "bottom")
# ------------- Seleccion de variables ---------------
# Objetivo: realizar una seleccion previa de variables empleando
# -> metodos step aic + bic
# -> rfe
# -> Por ultimo, elegir las variables candidatas por medio de glm
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(ggplot2)       # Libreria grafica
source("./librerias/librerias_propias.R")
source("./librerias/funcion steprepetido binaria.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
# Por el momento, eliminamos ccsComplicationRate y complication_rsi
ccsComplicationRate <- surgical_dataset$ccsComplicationRate
complication_rsi    <- surgical_dataset$complication_rsi
surgical_dataset$complication_rsi <- NULL; surgical_dataset$ccsComplicationRate <- NULL
surgical_dataset$baseline_dementia <- NULL; surgical_dataset$mort30 <- NULL
# ------------- Seleccion de variables ---------------
# Objetivo: realizar una seleccion previa de variables empleando
# -> metodos step aic + bic
# -> rfe
# -> Por ultimo, elegir las variables candidatas por medio de glm
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(parallel)      # Paralelizacion de funciones (I)
library(doParallel)    # Paralelizacion de funciones (II)
library(caret)         # Recursive Feature Elimination
library(ggplot2)       # Libreria grafica
source("./librerias/librerias_propias.R")
source("./librerias/funcion steprepetido binaria.R")
})
#--- Creamos el cluster
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
#--- Lectura dataset depurado
surgical_dataset <- fread("./data/surgical_dataset_final.csv", data.table = FALSE)
surgical_dataset$target <- as.factor(surgical_dataset$target)
library(rpart.plot)
surgical_dataset[surgical_dataset$month.8 == 1, ]
surgical_dataset[surgical_dataset$month.8 == 1, ][c(1:200), ]
surgical_dataset[surgical_dataset$month.8 == 1, ][c(1:200), "target"]
surgical_dataset[surgical_dataset$month.8 == 1 & surgical_dataset$target == "Yes", ][c(1:200), "target"]
View(surgical_dataset)
sum(is.na(surgical_dataset$target))
surgical_dataset[surgical_dataset$month.8 == 1 & surgical_dataset$target == "Yes", ][c(1:100), "target"]
surgical_dataset[surgical_dataset$month.8 == 1 & surgical_dataset$target == "Yes", ][c(1:100), "target"] <- "No"
sum(is.na(surgical_dataset$target))
tree <- rpart(factor(target) ~ mortality_rsi + bmi + month.8 + Age, data = surgical_dataset, method = "class")
rpart.plot(tree)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
surgical_dataset[surgical_dataset$month.8 == 1 & surgical_dataset$target == "Yes", ][c(1:50), "target"] <- "No"
tree <- rpart(factor(target) ~ mortality_rsi + bmi + month.8 + Age, data = surgical_dataset, method = "class")
rpart.plot(tree)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Depuracion.RData")
# ------------- Depuracion ---------------
# Objetivo: realizar un analisis exploratorio + depuracion inicial datos
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
# Problema - numerosas observaciones
# Por tiempo, se ha tomado la decision de elegir un subconjunto de datos
# Para ello, recurrimos a createDataPartition
set.seed(1234)
partitions <- createDataPartition(surgical_dataset$complication, p = 0.40, list = FALSE)
surgical_dataset_partitioned <- surgical_dataset[, partitions]
surgical_dataset_partitioned <- surgical_dataset[partitions, ]
surgical_dataset_partitioned[surgical_dataset_partitioned$month.8 == 1 & surgical_dataset_partitioned$target == "Yes", ][c(1:50), "target"] <- "No"
tree <- rpart(factor(target) ~ mortality_rsi + bmi + month.8 + Age, data = surgical_dataset, method = "class")
surgical_dataset_partitioned$complication <- as.factor(surgical_dataset_partitioned$complication)
# Por numerico de valores unicos (y por la documentacion), codificamos las siguientes variables como categoricas
cat_columns <- c("gender", "race", "asa_status", "baseline_cancer", "baseline_cvd", "baseline_dementia",
"baseline_diabetes", "baseline_digestive", "baseline_osteoart", "baseline_psych",
"baseline_pulmonary", "dow", "month", "moonphase", "mort30", "complication")
surgical_dataset_partitioned[,cat_columns] <- lapply(surgical_dataset_partitioned[, cat_columns], factor)
media
columnas_dummy <- c("asa_status", "dow", "month",
"moonphase", "race")
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Depuracion.RData")
rm(list = setdiff(ls(), c("media", "desv.tipica")))
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
unscale()
media
desv.tipica
names(medias)
names(media)
surgical_dataset[, names(media)] %>% psych::rescale(mean = media, sd = desv.tipica)
surgical_dataset[, names(media)]
names(surgical_dataset)
names(media)[-1]
names(media)[c(-4, -6)]
surgical_dataset[, names(media)[c(-4, -6)]] %>% psych::rescale(mean = media, sd = desv.tipica)
surgical_dataset[, names(media)[c(-5, -6)]] %>% psych::rescale(mean = media, sd = desv.tipica)
surgical_dataset[, names(media)[c(-5, -7)]] %>% psych::rescale(mean = media, sd = desv.tipica)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/Depuracion.RData")
surgical_dataset_partitioned_stnd_dummy
surgical_dataset
num_columns
surgical_dataset_partitioned_stnd
surgical_dataset_final <- cbind(
surgical_dataset[, num_columns],
surgical_dataset_partitioned_stnd_dummy,
surgical_dataset_partitioned_stnd[, target]
)
surgical_dataset_partitioned_stnd_dummy
surgical_dataset_partitioned_stnd[, target]
surgical_dataset_final <- cbind(
surgical_dataset_partitioned[, num_columns],
surgical_dataset_partitioned_stnd_dummy,
surgical_dataset_partitioned_stnd[, target]
)
names(surgical_dataset_final)[37] <- "target"
names(surgical_dataset_final)
names(surgical_dataset_final)[27] <- "target"
surgical_dataset_final[surgical_dataset_final$month.8 == 1 & surgical_dataset_final$target == "Yes", ][c(1:50), "target"] <- "No"
surgical_dataset_final <- cbind(
surgical_dataset_partitioned[, num_columns],
surgical_dataset_partitioned_stnd_dummy,
surgical_dataset_partitioned_stnd[, target]
)
names(surgical_dataset_final)[27] <- "target"
sapply(surgical_dataset_final, class)
surgical_dataset_final$target <- ifelse(
surgical_dataset_final$target == 1,
"Yes",
"No"
)
surgical_dataset_final[surgical_dataset_final$month.8 == 1 & surgical_dataset_final$target == "Yes", ][c(1:50), "target"] <- "No"
tree <- rpart(factor(target) ~ mortality_rsi + bmi + month.8 + Age, data = surgical_dataset, method = "class")
tree <- rpart(factor(target) ~ mortality_rsi + bmi + month.8 + Age, data = surgical_dataset_final, method = "class")
rpart.plot(tree)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
lista.variables.aic
View(lista.variables.aic)
View(tabla.aic)
View(tabla.bic)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
aux <- glm(factor(target) ~ bmi + month.8 + mortality_rsi + Age, data=surgical_dataset, family=binomial(link="logit"))
aux$coefficients
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/XGBoost.RData")
aux <- glm(factor(target) ~ bmi + month.8 + mortality_rsi + Age, data=surgical_dataset, family=binomial(link="logit"))
aux$coefficients
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
View(lista.variables.aic)
View(tabla.aic)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables_DatasetCompleto.RData")
View(tabla.aic)
head(tabla.aic, 4)
View(tabla.aic$modelo)
head(tabla.aic$modelo, 4)
View(tabla.bic)
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/SeleccionVariables.RData")
View(tabla.bic)
# ------------- Depuracion ---------------
# Objetivo: realizar un analisis exploratorio + depuracion inicial datos
# Autor: Alberto Fernandez Hernandez
#--- Librerias
suppressPackageStartupMessages({
library(caret)         # Data partitioning
library(data.table)    # Lectura de ficheros mucho mas rapido que read.csv
library(dplyr)         # Manipulacion de datos
library(ggplotgui)     # EDA manual mediante entorno interactivo (GUI)
library(ggplot2)       # Libreria grafica
library(scorecard)     # Woebin + Woebin_plot + Information Value (IV)
library(bestNormalize) # Transformacion optima variables continuas
library(VGAM)          # Aplicacion de transformaciones sobre variables
library(dummies)       # Creacion variables dummy
library(psych)         # Informacion estadistica de dataframes
library(ranger)        # Random Forest
library(forcats)       # Tratamiento variables categoricas
source("./librerias/librerias_propias.R")
})
surgical_dataset <- fread("./data/Surgical-deepnet.csv", data.table = FALSE)
dim(surgical_dataset) # Filas x columnas
surgical_dataset_partitioned <- surgical_dataset
#-- Codificamos como variables categoricas: target + variables categoricas
surgical_dataset_partitioned$complication <- as.factor(surgical_dataset_partitioned$complication)
# Por numerico de valores unicos (y por la documentacion), codificamos las siguientes variables como categoricas
cat_columns <- c("gender", "race", "asa_status", "baseline_cancer", "baseline_cvd", "baseline_dementia",
"baseline_diabetes", "baseline_digestive", "baseline_osteoart", "baseline_psych",
"baseline_pulmonary", "dow", "month", "moonphase", "mort30", "complication")
surgical_dataset_partitioned[,cat_columns] <- lapply(surgical_dataset_partitioned[, cat_columns], factor)
# Problema: complication_rsi y ccsComplicationRate se calculan a partir de la variable objetivo
# surgical_dataset_partitioned$complication_rsi    <- NULL
# surgical_dataset_partitioned$ccsComplicationRate <- NULL
# Separamos las variables en numericas, categoricas y target
cat_columns <- names(Filter(is.factor, surgical_dataset_partitioned))[-16]
num_columns <- names(Filter(is.numeric, surgical_dataset_partitioned))
target      <- "complication"
library(inspectdf)
# Horizontal bar plot for categorical column composition
x <- inspect_cat(surgical_dataset_partitioned)
show_plot(x)
# Correlation betwee numeric columns + confidence intervals
x <- inspect_cor(surgical_dataset_partitioned)
show_plot(x)
surgical_dataset_partitioned$ccsComplicationRate <- NULL
surgical_dataset_partitioned$complication_rsi <- NULL
# Horizontal bar plot for categorical column composition
x <- inspect_cat(surgical_dataset_partitioned)
show_plot(x)
# Correlation betwee numeric columns + confidence intervals
x <- inspect_cor(surgical_dataset_partitioned)
show_plot(x)
x <- inspect_imb(surgical_dataset_partitioned)
show_plot(x)
# Bar plot showing memory usage for each column
x <- inspect_mem(surgical_dataset_partitioned)
show_plot(x)
# Occurence of NAs in each column ranked in descending order
x <- inspect_na(surgical_dataset_partitioned)
show_plot(x)
# Histograms for numeric columns
x <- inspect_num(surgical_dataset_partitioned)
show_plot(x)
# Barplot of column types
x <- inspect_types(surgical_dataset_partitioned)
show_plot(x)
pdf("reports/Anexos/EDA_report.pdf")
# Barplot of column types
x <- inspect_types(surgical_dataset_partitioned)
show_plot(x)
# Horizontal bar plot for categorical column composition
x <- inspect_cat(surgical_dataset_partitioned)
show_plot(x)
# Correlation betwee numeric columns + confidence intervals
x <- inspect_cor(surgical_dataset_partitioned)
show_plot(x)
# Bar plot of most frequent category for each categorical column
x <- inspect_imb(surgical_dataset_partitioned)
show_plot(x)
# Bar plot showing memory usage for each column
x <- inspect_mem(surgical_dataset_partitioned)
show_plot(x)
# Occurence of NAs in each column ranked in descending order
x <- inspect_na(surgical_dataset_partitioned)
show_plot(x)
# Histograms for numeric columns
x <- inspect_num(surgical_dataset_partitioned)
show_plot(x)
dev.off()
load("~/UCM/Machine Learning/Practica ML/MachineLearning/rdata/PuntoDeCorte.RData")
var_modelo1
var_modelo2
result_bagging[2]
result_bagging[4]
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_set_empleado.png')
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_bic.png')
library(visualpred)
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_set_empleado.png')
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_bic.png')
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=var_modelo2,listclass=c(""),vardep=target,
title="gbm set empleado en la practica",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_set_empleado.png')
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="gbm con stepwise BIC",title2=" ",selec=0,modelo="rf",classvar=0,n.minobsinnode=20,shrink=0.2,ntreegbm = 100,
bag.fraction=0.5, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/gbm_bic.png')
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_bagging <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest set empleado en la practica",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/rf_set_empleado.png')
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Random Forest con stepwise BIC",title2=" ",selec=0,modelo="rf",classvar=0,mtry=2,ntree=2000,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/rf_bic.png')
candidato_bic <- c("mortality_rsi", "ccsMort30Rate", "bmi", "month.8", "dow.0",
"Age", "moonphase.0", "baseline_osteoart", "asa_status.0")
result_bagging <- famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Bagging set empleado en la practica",title2=" ",selec=0,modelo="rf",classvar=0,mtry=4,ntree=900,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/bagging_set_empleado.png')
result_bagging <-famdcontour(dataf=surgical_dataset,listconti=candidato_bic,listclass=c(""),vardep=target,
title="Bagging con stepwise BIC",title2=" ",selec=0,modelo="rf",classvar=0,mtry=4,ntree=900,sampsize=1000,
nodesize=20, alpha1 = 1, alpha2 = 1, alpha3 = 1)
result_bagging[4]
ggsave('./aux/bagging_bic.png')
